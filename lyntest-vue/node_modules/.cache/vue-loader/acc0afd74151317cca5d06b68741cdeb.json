{"remainingRequest":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/component/autotest/http-case-edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/component/autotest/http-case-edit.vue","mtime":1608196730000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport VueJsonPretty from 'vue-json-pretty'\nimport Category from '@/model/autotest/category'\nimport HttpCase from '@/model/autotest/http-case'\nimport AssertionsDetail from '@/component/autotest/assertions-detail'\nimport ResponseStatus from '@/component/autotest/response-status'\n\nexport default {\n  props: {\n    operationType: {\n      type: Number\n    },\n    caseInfo: {\n      type: Object\n    }\n  },\n  components: {\n    VueJsonPretty,\n    AssertionsDetail,\n    ResponseStatus,\n  },\n  data() {\n    return {\n      case_info: {},\n      category_list: [],\n      default_case_info: {\n        category: '',\n        case_name: '',\n        api_url: 'http://',\n        api_port: null,\n        api_method: 'POST',\n        api_path: '',\n        description: '',\n        header_form: [{\n          enable: true,\n        }],\n        body_type: 1,\n        body_value: null,\n        variable_list: [{\n          enable: true,\n        }],\n        expected_list: [{\n          enable: true,\n        }],\n      },\n      config: {\n        method_list: ['POST', 'GET', 'PUT', 'DELETE'],\n        extract_type_list: [{\n          label: 'JsonPath提取',\n          value: 1,\n        }, {\n          label: '正则表达式提取',\n          value: 2,\n        }],\n        expected_type_list: [{\n          label: 'equals',\n          value: 1,\n        }, {\n          label: 'contains',\n          value: 2,\n        }, {\n          label: 'not empty or null',\n          value: 3,\n        }]\n      },\n      has_result: false, // 是否进行了请求\n      result: {},\n      result_css: {\n        status_code_type: 'success',\n        time_type: 'success',\n      },\n      result_is_json: false, // 返回body是否为json\n      result_json_path: '',\n    }\n  },\n  mounted() {\n    this.getCaseInfo()\n    this.getCategoryInfo()\n  },\n  methods: {\n    async getCategoryInfo() {\n      const res = await Category.getCategoryList()\n      this.category_list = res\n    },\n    getCaseInfo() {\n      this.case_info = this.operationType === 1 ? { ...this.default_case_info } : { ...this.caseInfo }\n    },\n    async caseExecute() {\n      const res = await HttpCase.execute(this.case_info)\n      this.result = res\n      // 如果返回结果为json，则进行格式美化，并展示copy按钮；不为json则直接显示文本内容\n      if (this.isJson(res.response_text)) {\n        this.result.response_text = JSON.parse(res.response_text)\n        this.result_is_json = true\n      }\n      this.has_result = true\n    },\n    async saveCase() {\n      const res = this.operationType === 2 ? await HttpCase.updateCase(this.case_info) : await HttpCase.createCase(this.case_info)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(`${res.message}`)\n        this.$emit('drawer-close')\n      } else {\n        this.$message.error('服务端异常')\n      }\n    },\n    eleIsDisable(index, data) {\n      return data.length - 1 === index\n    },\n    deleteRow(index, data) {\n      data.splice(index, 1)\n    },\n    headerChange() {\n      let isNeedCreate = true\n      this.case_info.header_form.forEach(item => {\n        if (!item.header_key && !item.header_value) {\n          // 没有空行，需要创建空行\n          isNeedCreate = false\n        }\n      })\n      if (isNeedCreate) {\n        this.case_info.header_form.push({ enable: true, header_key: '', header_value: '' })\n      }\n    },\n    variableChange() {\n      let isNeedCreate = true\n      this.case_info.variable_list.forEach(item => {\n        if (!item.extract_method && !item.extract_rule && !item.variable_name) {\n          // 没有空行，需要创建空行\n          isNeedCreate = false\n        }\n      })\n      if (isNeedCreate) {\n        this.case_info.variable_list.push({ enable: true, extract_method: '', extract_rule: '', variable_name: '' })\n      }\n    },\n    expectedChange() {\n      let isNeedCreate = true\n      this.case_info.expected_list.forEach(item => {\n        if (!item.extract_method && !item.extract_rule && !item.compare_type && !item.expected_value) {\n          // 没有空行，需要创建空行\n          isNeedCreate = false\n        }\n      })\n      if (isNeedCreate) {\n        this.case_info.expected_list.push({ enable: true, extract_method: '', extract_rule: '', compare_type: '', expected_value: '' })\n      }\n    },\n    // 点击json的key，获取jsonpath和data\n    resultTextClick(path) {\n      this.result_json_path = path\n    },\n    // 复制jsonPath\n    copyPath() {\n      const input = document.createElement('input')\n      input.value = this.result_json_path\n      document.body.appendChild(input)\n      input.select()\n      document.execCommand('Copy')\n      document.body.removeChild(input)\n      this.$message.success('复制成功')\n    },\n    isJson(str) {\n      if (typeof str !== 'string') {\n        return false\n      }\n      try {\n        const obj = JSON.parse(str)\n        return !!(typeof obj === 'object' && obj)\n      } catch (e) {\n        return false\n      }\n    }\n  }\n}\n",null]}