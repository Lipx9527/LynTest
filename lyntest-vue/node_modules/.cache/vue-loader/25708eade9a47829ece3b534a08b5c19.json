{"remainingRequest":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/lyntest/lyntest-vue/src/view/autotest/pressure-test.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/src/view/autotest/pressure-test.vue","mtime":1608860148357},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pressure from '@/model/autotest/pressure'\nimport HttpCaseChoose from '@/component/autotest/http-case-choose.vue'\nimport AssertionsDetail from '@/component/autotest/assertions-detail'\nimport VariableDetail from '@/component/autotest/variable-detail'\nimport ReadOnlyContent from '@/component/autotest/read-only-content'\nimport ResponseStatus from '@/component/autotest/response-status'\n\nexport default {\n  name: 'batch-execute',\n  components: {\n    HttpCaseChoose,\n    AssertionsDetail,\n    VariableDetail,\n    ReadOnlyContent,\n    ResponseStatus\n  },\n  data() {\n    return {\n      websocket: null,\n      loading: false,\n      case_info: {},\n      dialog_visible: false,\n      param: {\n        threads: 1,\n        times: 1,\n        case_id: null,\n      },\n      report_id: null,\n      report_list: [],\n      result_list: [],\n      table_data: [],\n      case_choose: false,\n      case_detail: {},\n      chartSettings: {\n        radius: [65, 45],\n        hoverAnimation: false,\n        label: { show: false }\n      },\n      chartExtend: {\n        graphic: [{\n          type: 'text',\n          left: 'center',\n          top: '45%',\n          style: {\n            text: 0,\n            textAlign: 'center',\n            fill: '#000',\n            fontSize: 28,\n          }\n        }, {\n          type: 'text',\n          left: 'center',\n          top: '55%',\n          style: {\n            text: '请求',\n            textAlign: 'center',\n            fill: '#999999',\n            fontSize: 16,\n          }\n        }],\n        color: ['#00C292', '#E46A76']\n      },\n      chartData: {\n        columns: ['type', 'count'],\n        rows: [\n          { type: '成功', count: 0 },\n          { type: '失败', count: 0 }\n        ]\n      },\n    }\n  },\n  destroyed() {\n    // 关闭链接\n    if (this.websocket) {\n      this.websocket.close()\n    }\n  },\n  methods: {\n    initWebSocket() {\n      const uri = process.env.VUE_APP_SOCKET_URL\n      this.websocket = new WebSocket(uri)\n      this.websocket.onmessage = this.websocketOnMessage\n      this.websocket.onopen = this.websocketOnOpen\n      this.websocket.onerror = this.websocketOnError\n      this.websocket.onclose = this.websocketClose\n    },\n    websocketOnOpen() {\n      console.log('建立websocket连接')\n    },\n    websocketOnError() { // 连接建立失败重连\n      this.initWebSocket()\n    },\n    async websocketOnMessage(e) { // 数据接收\n      console.log(e.data)\n      const [type, id] = e.data.split('_')\n      if (type !== 'pressure') {\n        return\n      }\n      if (Number(id) !== this.param.case_id) {\n        return\n      }\n      this.websocket.close()\n      this.loading = false\n      await this.getReportList()\n      await this.getReportDetail()\n    },\n    websocketSend(data) { // 数据发送\n      this.websocket.send(data)\n    },\n    websocketClose(e) { // 关闭\n      console.log('断开连接', e)\n      this.loading = false\n    },\n    async doExecute() {\n      this.loading = true\n      this.initWebSocket()\n      this.report_id = await Pressure.execute(this.param)\n    },\n    async dialogClose() {\n      this.dialog_visible = false\n      this.param.case_id = this.case_info.id\n      await this.getReportList()\n      await this.getReportDetail()\n    },\n    async getReportList() {\n      const res = await Pressure.getReportIdList(this.param.case_id)\n      this.report_list = res\n      if (res.length === 0) {\n        this.report_id = null\n        return\n      }\n      const firstId = res[0]\n      this.report_id = firstId\n    },\n    async getReportDetail() {\n      if (this.report_id === null) {\n        return\n      }\n      const res = await Pressure.getReportDetail(this.report_id)\n      this.dataInit(res)\n    },\n    dataInit(res) {\n      this.table_data = []\n      const { pass_count, error_count, result } = res\n      this.table_data.push(res)\n      this.chartExtend.graphic[0].style.text = pass_count + error_count\n      this.chartData.rows[0].count = pass_count\n      this.chartData.rows[1].count = error_count\n      this.result_list = result\n    },\n    getCaseDetail(caseInfo) {\n      this.case_choose = true\n      this.result_list.forEach(e => {\n        e.is_choose = false\n      })\n      caseInfo.is_choose = true\n      this.case_detail = caseInfo\n    }\n  }\n}\n",null]}