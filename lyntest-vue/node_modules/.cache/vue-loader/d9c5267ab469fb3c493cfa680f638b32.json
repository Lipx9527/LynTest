{"remainingRequest":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/view/api-test/collection-detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/view/api-test/collection-detail.vue","mtime":1608715596686},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport LynCron from '@/component/lyn/lyn-cron'\nimport Collection from '@/model/autotest/collection'\nimport HttpCase from '@/model/autotest/http-case'\nimport CollectionReport from '@/model/autotest/collection-report'\nimport Category from '@/model/autotest/category'\nimport HttpCaseEdit from '@/component/autotest/http-case-edit'\n\nexport default {\n  components: {\n    LynCron,\n    HttpCaseEdit\n  },\n  data() {\n    return {\n      execute_button_loading: false,\n      collection_id: null,\n      current_pocket_id: null,\n      collection_info: {},\n      push_type_list: [{\n        label: 1,\n        value: '不推送'\n      }, {\n        label: 2,\n        value: '失败时推送'\n      }, {\n        label: 3,\n        value: '总是推送'\n      }],\n      push_list_visible: false,\n      collection_info_dialog_visible: false,\n      config_dialog_visible: false,\n      pocket_dialog_visible: false,\n      timing_dialog_visible: false,\n      drawer_visible: false,\n      pocket_operation_type: 0,\n      search: {\n        count: 10,\n        page: 1,\n        case_name: '',\n        category: '',\n        creator_code: '',\n      },\n      total: 0,\n      creator_list: [],\n      category_list: [],\n      case_list: [],\n      case_info: {},\n      pocket_list: [],\n      // 默认展开的pocketId\n      default_expanded_key: [],\n      pocket_info: {\n        collection_id: null,\n        pocket_name: ''\n      },\n      // 当前选中pocket内，所有case的id的列表\n      current_choose_case_id_list: [],\n      tester_list: [],\n      defaultProps: {\n        children: 'children',\n        label: 'name'\n      }\n    }\n  },\n  mounted() {\n    this.getCategoryList()\n    this.getCreatorList()\n    this.pageInit()\n  },\n  watch: {\n    $route() {\n      this.pageInit()\n    }\n  },\n  methods: {\n    // 获取系统列表\n    async getCategoryList() {\n      const res = await Category.getCategoryList()\n      this.category_list = res\n    },\n    // 获取创建人列表\n    async getCreatorList() {\n      const res = await HttpCase.getCreatorList()\n      this.creator_list = res\n    },\n    async pageInit() {\n      this.collection_id = this.$route.params.id\n      this.getCollectionDetail()\n      await this.getPocketList()\n      await this.pocketDefaultExpanded()\n      await this.setPocketCaseIdList()\n      await this.refreshTableInfo()\n      await this.getPushList()\n    },\n    // 获取推送人列表（测试人员）\n    async getPushList() {\n      this.tester_list = await HttpCase.getCreatorList()\n    },\n    // 获取集合基础信息详情（不包含case信息）\n    async getCollectionDetail() {\n      this.collection_info = await Collection.getCollectionDetail(this.collection_id)\n      this.push_list_visible = this.collection_info.push_type === 1\n    },\n    // 获取pocket列表\n    async getPocketList() {\n      this.pocket_list = await Collection.getPocketInfo(this.collection_id)\n    },\n    // 初始化时，默认展开第一个pocket\n    pocketDefaultExpanded() {\n      this.current_pocket_id = this.pocket_list[0].id\n      this.default_expanded_key = [this.pocket_list[0].id]\n    },\n    // 获取当前选中pocket的caseList的id集合\n    async setPocketCaseIdList() {\n      this.current_choose_case_id_list = []\n      this.pocket_list.forEach(pocket => {\n        if (pocket.id !== this.current_pocket_id) {\n          return false\n        }\n        pocket.children.forEach(e => {\n          this.current_choose_case_id_list.push(e.business_id)\n        })\n      })\n    },\n    // 刷新table的数据与选中状态\n    async refreshTableInfo() {\n      await this.searchCaseList()\n      await this.refreshCaseChooseType()\n    },\n    // 获取caseList\n    async searchCaseList() {\n      const res = await HttpCase.searchCaseList(this.search)\n      this.case_list = res.items\n      this.total = res.total\n    },\n    // 对caseList中的row的选中状态进行渲染\n    async refreshCaseChooseType() {\n      this.case_list.forEach(row => {\n        if (this.current_choose_case_id_list.indexOf(row.id) > -1) {\n          this.$refs.multipleTable.toggleRowSelection(row, true)\n        }\n      })\n    },\n    handleEdit(row) {\n      this.drawer_visible = true\n      this.case_info = { ...row }\n    },\n    async updateCollection() {\n      const res = await Collection.updateCollection(this.collection_info)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.collection_info_dialog_visible = false\n        this.config_dialog_visible = false\n      } else {\n        this.$message.error('服务端异常')\n      }\n    },\n    closeCollectionEdit() {\n      this.collection_info_dialog_visible = false\n      this.$refs.collection_info.resetFields()\n    },\n    pushListChange(val) {\n      this.push_list_visible = val === 1\n    },\n    async handleNodeClick(data, node) {\n      if (node.level === 2) {\n        return\n      }\n      const id = node.level === 1 ? data.id : node.parent.data.id\n      this.current_pocket_id = id\n      this.default_expanded_key = [id]\n      this.setPocketCaseIdList()\n      this.getPocketList()\n      await this.refreshTableInfo()\n    },\n    async handleDragEnd(draggingNode, dropNode, dropType) {\n      if (dropType === 'none' || dropType === undefined) {\n        return\n      }\n      const list = [draggingNode.level]\n      let nodes = null\n      if (draggingNode.level === 1) {\n        nodes = dropNode.parent.data\n      } else if (draggingNode.level === 2) {\n        nodes = dropNode.parent.data.children\n      }\n      this.getNodeTree(nodes, draggingNode.data.id, list)\n      await Collection.nodePosition(list)\n    },\n    getNodeTree(nodes, id, list) {\n      if (!nodes) {\n        return\n      }\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].id === id) {\n          list[1] = i - 1 >= 0 ? nodes[i - 1].id : 0\n          list[2] = nodes[i].id\n          list[3] = i + 1 < nodes.length ? nodes[i + 1].id : 0\n          return\n        }\n      }\n    },\n    allowDrop(draggingNode, dropNode, type) {\n      return draggingNode.level === dropNode.level && type !== 'inner'\n    },\n    createNewPocket() {\n      this.pocket_dialog_visible = true\n      this.pocket_operation_type = 1\n      this.pocket_info.pocket_name = ''\n      this.pocket_info.collection_id = this.collection_id\n    },\n    updatePocket(data) {\n      this.pocket_dialog_visible = true\n      this.pocket_operation_type = 2\n      this.pocket_info = {\n        id: data.id,\n        pocket_name: data.name\n      }\n    },\n    async deletePocket(id) {\n      if (this.pocket_list.length <= 1) {\n        this.$message.error('至少保留一个模块')\n        return\n      }\n      this.$confirm('确定要删除吗?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n      })\n        .then(\n          async () => {\n            const res = await Collection.deletePocket(id)\n            if (res.code < window.MAX_SUCCESS_CODE) {\n              this.$message.success(res.message)\n              this.pageInit()\n            } else {\n              this.$message.error('删除功能异常')\n            }\n          }\n        )\n    },\n    async pocketSave() {\n      let res\n      if (this.pocket_operation_type === 2) {\n        res = await Collection.updatePocket(this.pocket_info)\n        if (res.code < window.MAX_SUCCESS_CODE) {\n          this.$message.success(res.message)\n          this.pocket_dialog_visible = false\n          this.getPocketList()\n        } else {\n          this.$message.error('服务端异常')\n        }\n      } else if (this.pocket_operation_type === 1) {\n        res = await Collection.createPocket(this.pocket_info)\n        if (res.code < window.MAX_SUCCESS_CODE) {\n          this.pocket_dialog_visible = false\n          this.getPocketList()\n          const id = Number(res.message)\n          this.default_expanded_key = [id]\n          this.current_pocket_id = id\n          this.current_choose_case_id_list = []\n          await this.refreshTableInfo()\n        } else {\n          this.$message.error('服务端异常')\n        }\n      }\n    },\n    async selectAll(val) {\n      const list = []\n      if (val.length === 0) {\n        // 取消全选\n        this.case_list.forEach(async e => {\n          const param = {\n            pocket_id: this.current_pocket_id,\n            case_id: e.id,\n            case_name: e.case_name,\n          }\n          list.push(param)\n          this.current_choose_case_id_list.splice(this.current_choose_case_id_list.indexOf(e.id), 1)\n        })\n        await Collection.batchDeleteCase(list)\n      } else {\n        // 全选\n        val.forEach(async e => {\n          if (!this.current_choose_case_id_list.includes(e.id)) {\n            const param = {\n              pocket_id: this.current_pocket_id,\n              case_id: e.id,\n              case_name: e.case_name,\n            }\n            list.push(param)\n            this.current_choose_case_id_list.push(e.id)\n          }\n        })\n        await Collection.batchInsertCase(list)\n      }\n      this.getPocketList()\n      this.default_expanded_key = [this.current_pocket_id]\n    },\n    async rowSelect(selection, row) {\n      // false为反选，true为选中\n      let chooseType = false\n      const { id, case_name } = row\n      selection.forEach(r => {\n        chooseType = r.id === id\n      })\n      const param = {\n        pocket_id: this.current_pocket_id,\n        case_id: id,\n        case_name,\n      }\n      if (chooseType) {\n        await Collection.insertCaseToPocket(param)\n        this.current_choose_case_id_list.push(id)\n      } else {\n        await Collection.deleteCaseFromPocket(param)\n        this.current_choose_case_id_list.splice(this.current_choose_case_id_list.indexOf(id), 1)\n      }\n      this.getPocketList()\n    },\n    async deleteCase(data) {\n      this.current_choose_case_id_list.splice(this.current_choose_case_id_list.indexOf(data.business_id), 1)\n      const param = {\n        pocket_id: this.current_pocket_id,\n        case_id: data.business_id,\n      }\n      await Collection.deleteCaseFromPocket(param)\n      await this.getPocketList()\n      await this.refreshTableInfo()\n    },\n    handleSizeChange(val) {\n      this.search.count = val\n      this.refreshTableInfo()\n    },\n    handleCurrentChange(val) {\n      this.search.page = val\n      this.refreshTableInfo()\n    },\n    async doExecute() {\n      this.execute_button_loading = true\n      const reportId = await CollectionReport.execute(this.collection_id)\n      await new Promise(resolve => {\n        setTimeout(() => resolve('down'), 1000)\n      })\n      this.execute_button_loading = false\n      this.$router.push(`/api-test/report-detail/${reportId}`)\n    },\n    drawerClose() {\n      this.drawer_visible = false\n      this.searchCaseList()\n    }\n  },\n}\n",null]}