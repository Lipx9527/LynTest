{"remainingRequest":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/lyntest/lyntest-vue/src/component/common/node-tree.vue?vue&type=style&index=0&id=391fd350&scoped=true&lang=css&","dependencies":[{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/src/component/common/node-tree.vue","mtime":1607655351000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.custom-tree-node {\n  flex: 1 1 auto;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 14px;\n  padding-right: 8px;\n  width: 100%;\n}\n\n.node-tree {\n  margin-top: 15px;\n}\n\n.father .child {\n  display: none;\n}\n\n.father:hover .child {\n  display: block;\n}\n\n.node-title {\n  width: 0;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  flex: 1 1 auto;\n  padding: 0 5px;\n  overflow: hidden;\n}\n\n.node-operate > i {\n  color: #409eff;\n  margin: 0 5px;\n}\n",{"version":3,"sources":["node-tree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"node-tree.vue","sourceRoot":"src/component/common","sourcesContent":["<template xmlns:v-slot=\"http://www.w3.org/1999/XSL/Transform\">\n  <div v-loading=\"result.loading\">\n    <el-input placeholder=\"模块搜索\" v-model=\"filterText\" size=\"small\">\n      <template v-if=\"type === 'edit'\" v-slot:append>\n        <el-button :disabled=\"disabled\" icon=\"el-icon-folder-add\" @click=\"openEditNodeDialog('add')\"></el-button>\n      </template>\n    </el-input>\n\n    <el-tree\n      class=\"node-tree\"\n      :data=\"treeNodes\"\n      :default-expanded-keys=\"expandedNode\"\n      node-key=\"id\"\n      @node-drag-end=\"handleDragEnd\"\n      @node-expand=\"nodeExpand\"\n      @node-collapse=\"nodeCollapse\"\n      :filter-node-method=\"filterNode\"\n      :expand-on-click-node=\"false\"\n      highlight-current\n      :draggable=\"draggable\"\n      :props=\"defaultProps\"\n      ref=\"tree\">\n      <template v-slot:default=\"{node,data}\">\n        <span class=\"custom-tree-node father\" @click=\"handleNodeSelect(node)\">\n          <span class=\"node-icon\">\n            <i class=\"el-icon-folder\"></i>\n          </span>\n          <!--如果没修改过字段，这里对应后端应该使用node.name-->\n          <span class=\"node-title\">{{ node.label }}</span>\n\n          <span v-if=\"type === 'edit' && !disabled\" class=\"node-operate child\">\n            <el-tooltip\n              class=\"item\"\n              effect=\"dark\"\n              :open-delay=\"200\"\n              content=\"重命名\"\n              placement=\"top\">\n              <i @click.stop=\"openEditNodeDialog('edit', data)\" class=\"el-icon-edit\"></i>\n            </el-tooltip>\n            <el-tooltip\n              class=\"item\"\n              effect=\"dark\"\n              :open-delay=\"200\"\n              content=\"添加子模块\"\n              placement=\"top\">\n              <i @click.stop=\"openEditNodeDialog('add', data)\" class=\"el-icon-circle-plus-outline\"></i>\n            </el-tooltip>\n            <el-tooltip class=\"item\" effect=\"dark\"\n                        :open-delay=\"200\" content=\"删除\" placement=\"top\">\n              <i @click.stop=\"remove(node, data)\" class=\"el-icon-delete\"></i>\n            </el-tooltip>\n          </span>\n        </span>\n      </template>\n    </el-tree>\n    <node-edit ref=\"nodeEdit\" :current-project=\"currentProject\" :tree-nodes=\"treeNodes\" @refresh=\"refreshNode\" />\n    <el-dialog :visible.sync=\"confirmDeleteDialog\" width=\"30%\">\n      <span>删除模块同时,其子模块及测试用例会全被删除，是否继续删除？</span>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"confirmDeleteDialog = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"confirmRemove\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport NodeEdit from './node-edit'\nimport Node from '@/model/track/node'\n\nexport default {\n  name: 'node-tree',\n  components: { NodeEdit },\n  data() {\n    return {\n      result: {},\n      expandedNode: [],\n      filterText: '',\n      defaultProps: {\n        children: 'children',\n        label: 'name'\n      },\n      disabled: false,\n      list: [],\n      confirmDeleteDialog: false,\n      removeNodeIds: [],\n    }\n  },\n  props: {\n    type: {\n      type: String,\n      default: 'view'\n    },\n    treeNodes: {\n      type: Array\n    },\n    selectNode: {\n      type: Object\n    },\n    draggable: {\n      type: Boolean,\n      default: true\n    },\n    currentProject: {\n      type: Object\n    }\n  },\n  watch: {\n    filterText(val) {\n      this.$refs.tree.filter(val)\n    }\n  },\n  methods: {\n    async handleDragEnd(draggingNode, dropNode, dropType) {\n      if (dropType === 'none' || dropType === undefined) {\n        return\n      }\n      const param = this.buildParam(draggingNode, dropNode, dropType)\n\n      this.list = []\n      this.getNodeTree(this.treeNodes, draggingNode.data.id, this.list)\n      const res = await Node.dragNode(param)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        await Node.nodePosition(this.list)\n        this.$emit('refresh')\n      } else {\n        this.$message.error('服务端异常')\n      }\n    },\n    buildParam(draggingNode, dropNode, dropType) {\n      let param\n      if (dropNode.level === 1 && dropType !== 'inner') {\n        param = draggingNode.data\n      } else {\n        this.treeNodes.some(node => {\n          param = this.findTreeByNodeId(node, dropNode.data.id)\n          return param\n        })\n      }\n      return param\n    },\n    getNodeTree(nodes, id, list) {\n      if (!nodes) {\n        return\n      }\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].id === id) {\n          list[0] = i - 1 >= 0 ? nodes[i - 1].id : 0\n          list[1] = nodes[i].id\n          list[2] = i + 1 < nodes.length ? nodes[i + 1].id : 0\n          return\n        }\n        if (nodes[i].children) {\n          this.getNodeTree(nodes[i].children, id, list)\n        }\n      }\n    },\n    refreshTable() {\n      this.$emit('refreshTable')\n    },\n    findTreeByNodeId(rootNode, nodeId) {\n      if (rootNode.id === nodeId) {\n        return rootNode\n      }\n      if (rootNode.children) {\n        for (let i = 0; i < rootNode.children.length; i++) {\n          if (this.findTreeByNodeId(rootNode.children[i], nodeId)) {\n            return rootNode\n          }\n        }\n      }\n    },\n    remove(node) {\n      const nodeIds = []\n      this.getChildNodeId(node.data, nodeIds)\n      this.removeNodeIds = nodeIds\n      this.confirmDeleteDialog = true\n    },\n    async confirmRemove() {\n      const res = await Node.deleteNodes(this.removeNodeIds)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(res.message)\n        this.$emit('refresh')\n        this.confirmDeleteDialog = false\n      } else {\n        this.$message.error('服务端异常')\n      }\n    },\n    handleNodeSelect(node) {\n      const nodeIds = []\n      const pNodes = []\n      this.getChildNodeId(node.data, nodeIds)\n      this.getParentNodes(node, pNodes)\n      this.$emit('nodeSelectEvent', nodeIds, pNodes)\n      this.$emit('update:selectNode', node)\n    },\n    getChildNodeId(rootNode, nodeIds) {\n      // 递归获取所有子节点ID\n      nodeIds.push(rootNode.id)\n      if (rootNode.children) {\n        for (let i = 0; i < rootNode.children.length; i++) {\n          this.getChildNodeId(rootNode.children[i], nodeIds)\n        }\n      }\n    },\n    getParentNodes(rootNode, pNodes) {\n      if (rootNode.parent && rootNode.parent.id !== 0) {\n        this.getParentNodes(rootNode.parent, pNodes)\n      }\n      if (rootNode.data.name && rootNode.data.name !== '') {\n        pNodes.push(rootNode.data)\n      }\n    },\n    filterNode(value, data) {\n      if (!value) return true\n      return data.name.indexOf(value) !== -1\n    },\n    openEditNodeDialog(type, data) {\n      const nodeIds = []\n      if (type === 'edit') {\n        this.getChildNodeId(data, nodeIds)\n      }\n      this.$refs.nodeEdit.open(type, data, nodeIds)\n    },\n    refreshNode() {\n      this.$emit('refresh')\n    },\n    nodeExpand(data) {\n      if (data.id) {\n        this.expandedNode.push(data.id)\n      }\n    },\n    nodeCollapse(data) {\n      if (data.id) {\n        this.expandedNode.splice(this.expandedNode.indexOf(data.id), 1)\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n  .custom-tree-node {\n    flex: 1 1 auto;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 14px;\n    padding-right: 8px;\n    width: 100%;\n  }\n\n  .node-tree {\n    margin-top: 15px;\n  }\n\n  .father .child {\n    display: none;\n  }\n\n  .father:hover .child {\n    display: block;\n  }\n\n  .node-title {\n    width: 0;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    flex: 1 1 auto;\n    padding: 0 5px;\n    overflow: hidden;\n  }\n\n  .node-operate > i {\n    color: #409eff;\n    margin: 0 5px;\n  }\n</style>\n"]}]}