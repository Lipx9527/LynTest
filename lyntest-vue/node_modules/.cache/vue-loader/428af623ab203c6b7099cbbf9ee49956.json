{"remainingRequest":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/lyntest/lyntest-vue/src/component/common/node-tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/src/component/common/node-tree.vue","mtime":1607655351000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport NodeEdit from './node-edit'\nimport Node from '@/model/track/node'\n\nexport default {\n  name: 'node-tree',\n  components: { NodeEdit },\n  data() {\n    return {\n      result: {},\n      expandedNode: [],\n      filterText: '',\n      defaultProps: {\n        children: 'children',\n        label: 'name'\n      },\n      disabled: false,\n      list: [],\n      confirmDeleteDialog: false,\n      removeNodeIds: [],\n    }\n  },\n  props: {\n    type: {\n      type: String,\n      default: 'view'\n    },\n    treeNodes: {\n      type: Array\n    },\n    selectNode: {\n      type: Object\n    },\n    draggable: {\n      type: Boolean,\n      default: true\n    },\n    currentProject: {\n      type: Object\n    }\n  },\n  watch: {\n    filterText(val) {\n      this.$refs.tree.filter(val)\n    }\n  },\n  methods: {\n    async handleDragEnd(draggingNode, dropNode, dropType) {\n      if (dropType === 'none' || dropType === undefined) {\n        return\n      }\n      const param = this.buildParam(draggingNode, dropNode, dropType)\n\n      this.list = []\n      this.getNodeTree(this.treeNodes, draggingNode.data.id, this.list)\n      const res = await Node.dragNode(param)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        await Node.nodePosition(this.list)\n        this.$emit('refresh')\n      } else {\n        this.$message.error('服务端异常')\n      }\n    },\n    buildParam(draggingNode, dropNode, dropType) {\n      let param\n      if (dropNode.level === 1 && dropType !== 'inner') {\n        param = draggingNode.data\n      } else {\n        this.treeNodes.some(node => {\n          param = this.findTreeByNodeId(node, dropNode.data.id)\n          return param\n        })\n      }\n      return param\n    },\n    getNodeTree(nodes, id, list) {\n      if (!nodes) {\n        return\n      }\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].id === id) {\n          list[0] = i - 1 >= 0 ? nodes[i - 1].id : 0\n          list[1] = nodes[i].id\n          list[2] = i + 1 < nodes.length ? nodes[i + 1].id : 0\n          return\n        }\n        if (nodes[i].children) {\n          this.getNodeTree(nodes[i].children, id, list)\n        }\n      }\n    },\n    refreshTable() {\n      this.$emit('refreshTable')\n    },\n    findTreeByNodeId(rootNode, nodeId) {\n      if (rootNode.id === nodeId) {\n        return rootNode\n      }\n      if (rootNode.children) {\n        for (let i = 0; i < rootNode.children.length; i++) {\n          if (this.findTreeByNodeId(rootNode.children[i], nodeId)) {\n            return rootNode\n          }\n        }\n      }\n    },\n    remove(node) {\n      const nodeIds = []\n      this.getChildNodeId(node.data, nodeIds)\n      this.removeNodeIds = nodeIds\n      this.confirmDeleteDialog = true\n    },\n    async confirmRemove() {\n      const res = await Node.deleteNodes(this.removeNodeIds)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(res.message)\n        this.$emit('refresh')\n        this.confirmDeleteDialog = false\n      } else {\n        this.$message.error('服务端异常')\n      }\n    },\n    handleNodeSelect(node) {\n      const nodeIds = []\n      const pNodes = []\n      this.getChildNodeId(node.data, nodeIds)\n      this.getParentNodes(node, pNodes)\n      this.$emit('nodeSelectEvent', nodeIds, pNodes)\n      this.$emit('update:selectNode', node)\n    },\n    getChildNodeId(rootNode, nodeIds) {\n      // 递归获取所有子节点ID\n      nodeIds.push(rootNode.id)\n      if (rootNode.children) {\n        for (let i = 0; i < rootNode.children.length; i++) {\n          this.getChildNodeId(rootNode.children[i], nodeIds)\n        }\n      }\n    },\n    getParentNodes(rootNode, pNodes) {\n      if (rootNode.parent && rootNode.parent.id !== 0) {\n        this.getParentNodes(rootNode.parent, pNodes)\n      }\n      if (rootNode.data.name && rootNode.data.name !== '') {\n        pNodes.push(rootNode.data)\n      }\n    },\n    filterNode(value, data) {\n      if (!value) return true\n      return data.name.indexOf(value) !== -1\n    },\n    openEditNodeDialog(type, data) {\n      const nodeIds = []\n      if (type === 'edit') {\n        this.getChildNodeId(data, nodeIds)\n      }\n      this.$refs.nodeEdit.open(type, data, nodeIds)\n    },\n    refreshNode() {\n      this.$emit('refresh')\n    },\n    nodeExpand(data) {\n      if (data.id) {\n        this.expandedNode.push(data.id)\n      }\n    },\n    nodeCollapse(data) {\n      if (data.id) {\n        this.expandedNode.splice(this.expandedNode.indexOf(data.id), 1)\n      }\n    }\n  }\n}\n",null]}