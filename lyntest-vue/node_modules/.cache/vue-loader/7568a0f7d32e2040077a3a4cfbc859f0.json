{"remainingRequest":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/view/sql/batch-execute.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/view/sql/batch-execute.vue","mtime":1606834545571},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { codemirror } from 'vue-codemirror'\nimport DataBase from '@/model/sql/database'\nimport Sql from '@/model/sql/sql'\n// require css\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/mode/sql/sql.js'\nimport 'codemirror/theme/cobalt.css'\n\nexport default {\n  components: {\n    codemirror,\n  },\n  data() {\n    return {\n      database_type: 1,\n      execute_info: {\n        database_id: null,\n        batch_num: 1,\n        sql_value: '',\n      },\n      database_type_list: [{\n        label: 'MySQL',\n        value: 1,\n      }, {\n        label: 'Oracle',\n        value: 2,\n      }],\n      database_list: [],\n      codemirror_options: {\n        tabSize: 4,\n        mode: 'text/x-mysql',\n        theme: 'cobalt',\n        lineNumbers: true,\n        line: true,\n      },\n      sql_list: [],\n      loading: false,\n    }\n  },\n  mounted() {\n    this.searchDataBaseList()\n  },\n  methods: {\n    async searchDataBaseList() {\n      const res = await DataBase.searchDBList(this.database_type)\n      this.database_list = res\n    },\n    async execute() {\n      this.loading = true\n      this.sql_list = []\n      const res = await Sql.batchExecuteSql(this.execute_info)\n      if (res.success) {\n        this.sql_list = res.result\n      } else {\n        this.$message.error(res.msg)\n      }\n      this.loading = false\n    },\n  },\n}\n",{"version":3,"sources":["batch-execute.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"batch-execute.vue","sourceRoot":"src/view/sql","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"header\"><div class=\"title\">SQL批量执行</div></div>\n    <div class=\"search-row\">\n      <div>\n        <el-select v-model=\"database_type\" class=\"db-type\" @change=\"searchDataBaseList\">\n          <el-option v-for=\"item in database_type_list\" :key=\"item.value\" :value =\"item.value\" :label =\"item.label\"></el-option>\n        </el-select>\n        <el-select v-model=\"execute_info.database_id\" placeholder=\"数据库筛选\" class=\"db-list\" filterable clearable>\n          <el-option v-for=\"item in database_list\" :key=\"item.id\" :value =\"item.id\" :label =\"item.database_name\"></el-option>\n        </el-select>\n        <el-input-number v-model=\"execute_info.batch_num\" :min=\"1\" :max=\"2000\" class=\"db-list\"></el-input-number>\n      </div>\n      <div class=\"page\">\n        <el-button type=\"primary\" @click=\"execute\" :loading=\"loading\">执 行</el-button>\n      </div>\n    </div>\n    <codemirror class=\"sql-input\" v-model=\"execute_info.sql_value\"  :options=\"codemirror_options\"></codemirror>\n    <div>\n      <div v-for=\"sql in sql_list\" :key=\"sql.index\">\n        <span>{{sql}}</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { codemirror } from 'vue-codemirror'\nimport DataBase from '@/model/sql/database'\nimport Sql from '@/model/sql/sql'\n// require css\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/mode/sql/sql.js'\nimport 'codemirror/theme/cobalt.css'\n\nexport default {\n  components: {\n    codemirror,\n  },\n  data() {\n    return {\n      database_type: 1,\n      execute_info: {\n        database_id: null,\n        batch_num: 1,\n        sql_value: '',\n      },\n      database_type_list: [{\n        label: 'MySQL',\n        value: 1,\n      }, {\n        label: 'Oracle',\n        value: 2,\n      }],\n      database_list: [],\n      codemirror_options: {\n        tabSize: 4,\n        mode: 'text/x-mysql',\n        theme: 'cobalt',\n        lineNumbers: true,\n        line: true,\n      },\n      sql_list: [],\n      loading: false,\n    }\n  },\n  mounted() {\n    this.searchDataBaseList()\n  },\n  methods: {\n    async searchDataBaseList() {\n      const res = await DataBase.searchDBList(this.database_type)\n      this.database_list = res\n    },\n    async execute() {\n      this.loading = true\n      this.sql_list = []\n      const res = await Sql.batchExecuteSql(this.execute_info)\n      if (res.success) {\n        this.sql_list = res.result\n      } else {\n        this.$message.error(res.msg)\n      }\n      this.loading = false\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n//noinspection CssUnknownTarget\n@import \"@/static/css/common.scss\";\n.search-row {\n  display: flex;\n  justify-content: space-between;\n\n  .db-type {\n    width: 100px\n  }\n\n  .db-list {\n    width: 150px;\n    margin-left: 10px\n  }\n\n}\n\n.sql-input {\n  margin-top: 20px;\n}\n</style>\n"]}]}