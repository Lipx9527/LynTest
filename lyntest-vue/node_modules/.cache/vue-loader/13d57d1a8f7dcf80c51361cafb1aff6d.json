{"remainingRequest":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/lyntest/lyntest-vue/src/component/layout/reuse-tab.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/src/component/layout/reuse-tab.vue","mtime":1607760303436},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex'\nimport { swiper, swiperSlide } from 'vue-awesome-swiper'\n\nimport 'swiper/dist/css/swiper.css' // eslint-disable-line\n\nexport default {\n  components: { swiper, swiperSlide },\n  data() {\n    return {\n      histories: [],\n      visible: false,\n      hasLeft: true,\n      hasRight: true,\n      top: 0,\n      left: 0,\n      index: 0,\n      swiperOption: {\n        slidesPerView: 'auto',\n        initialSlide: 0,\n        effect: 'slide',\n        spaceBetween: 1,\n        preventClicks: false,\n        freeMode: true,\n        mousewheel: {\n          sensitivity: 1.5,\n        },\n      },\n    }\n  },\n  watch: {\n    $route(to) {\n      // 对路由变化作出响应...\n      const { histories } = this\n      const flag = histories.find(item => item.path === to.path)\n      if (flag) {\n        return\n      }\n      const ele = {}\n      ele.stageId = to.name\n      ele.path = to.path\n      ele.routePath = to.matched[to.matched.length - 1].path\n      this.histories = [ele, ...histories]\n    },\n    logined(val) {\n      if (val) {\n        return\n      }\n      this.closeAll()\n    },\n    visible(value) {\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu)\n      } else {\n        document.body.removeEventListener('click', this.closeMenu)\n      }\n    },\n    // 舞台改变时触发\n    stageList() {\n      this.init()\n    },\n    histories(arr) {\n      if (arr.length < 2) {\n        this.eventBus.$emit('noReuse')\n      } else {\n        this.eventBus.$emit('hasReuse')\n      }\n    },\n  },\n  inject: ['eventBus'],\n  created() {\n    // 关闭窗口时执行\n    window.onbeforeunload = () => {\n      // 缓存历史记录\n      window.localStorage.setItem('history', JSON.stringify(this.histories))\n    }\n  },\n  computed: {\n    logined() {\n      return this.$store.state.logined\n    },\n    defaultRoute() {\n      return this.$store.state.defaultRoute\n    },\n    ...mapGetters(['getStageByRoute', 'getStageByName', 'stageList']),\n  },\n  mounted() {\n    this.init()\n    this.eventBus.$on('clearTap', () => {\n      this.histories = []\n    })\n  },\n  methods: {\n    init() {\n      const histories = []\n\n      // 获取当前的历史记录, 可能从本地存储, 可能直接获取当前的\n      let localHistory\n      if (this.histories.length > 0) {\n        localHistory = [...this.histories]\n      } else {\n        localHistory = window.localStorage.getItem('history') || '[]'\n        localHistory = JSON.parse(localHistory)\n      }\n\n      localHistory.forEach(item => {\n        let findResult\n        if (item.name) {\n          findResult = this.getStageByName(item.name)\n        } else {\n          findResult = this.getStageByRoute(item.routePath)\n        }\n        if (!findResult) {\n          return\n        }\n        histories.push({\n          ...item,\n          stageId: findResult.name,\n        })\n        this.histories = histories\n      })\n    },\n    filterIcon(icon) {\n      if (!icon) {\n        return false\n      }\n      return icon.indexOf('/') !== -1\n    },\n    closeAll() {\n      this.histories = []\n      this.$router.push(this.defaultRoute)\n    },\n    closeOthers() {\n      this.$router.push(this.histories[this.index].path)\n      this.histories = []\n    },\n    closeLeft() {\n      this.histories.splice(0, this.index)\n    },\n    closeRight() {\n      this.histories.splice(this.index + 1, this.histories.length - this.index - 1)\n    },\n    onTags(index, event) {\n      this.closeMenu()\n      const menuMinWidth = 126\n      const offsetLeft = this.$el.getBoundingClientRect().left\n      const { offsetWidth } = this.$el\n      const maxLeft = offsetWidth - menuMinWidth\n      const left = event.clientX - offsetLeft + 15\n\n      if (left > maxLeft) {\n        this.left = maxLeft\n      } else {\n        this.left = left\n      }\n\n      if (index === 0) {\n        this.hasLeft = false\n      }\n\n      if (index + 1 === this.histories.length) {\n        this.hasRight = false\n      }\n\n      this.top = 18\n      this.index = index\n      this.visible = true\n    },\n    closeMenu() {\n      this.visible = false\n      this.hasLeft = true\n      this.hasRight = true\n    },\n    close(index) {\n      // 检测是否是当前页, 如果是当前页则自动切换路由\n      if (this.$route.path === this.histories[index].path) {\n        if (index > 0) {\n          this.$router.push(this.histories[index - 1].path)\n        } else if (this.histories.length > 1) {\n          this.$router.push(this.histories[1].path)\n        } else {\n          this.$router.push(this.defaultRoute)\n        }\n      }\n      // 删除该历史记录\n      this.histories.splice(index, 1)\n      this.histories = [...this.histories]\n    },\n  },\n}\n",null]}