{"remainingRequest":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/thread-loader/dist/cjs.js!/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/babel-loader/lib/index.js!/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/eslint-loader/index.js??ref--13-0!/Users/lyn/Desktop/lyntest/lyntest-vue/src/component/base/upload-image/utils.js","dependencies":[{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/src/component/base/upload-image/utils.js","mtime":1606834545509},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// 检测官方文档: https://mimesniff.spec.whatwg.org/#matching-an-image-type-pattern\n\n/** 类型检测掩码集合 */\nvar patternMask = [{\n  name: 'image/x-icon',\n  mask: [0xff, 0xff, 0xff, 0xff],\n  byte: [0x00, 0x00, 0x01, 0x00]\n}, {\n  name: 'image/x-icon',\n  mask: [0xff, 0xff, 0xff, 0xff],\n  byte: [0x00, 0x00, 0x02, 0x00]\n}, {\n  name: 'image/bmp',\n  mask: [0xff, 0xff],\n  byte: [0x42, 0x4d]\n}, {\n  name: 'image/gif',\n  mask: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n  byte: [0x47, 0x49, 0x46, 0x38, 0x37, 0x61]\n}, {\n  name: 'image/gif',\n  mask: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n  byte: [0x47, 0x49, 0x46, 0x38, 0x39, 0x61]\n}, {\n  name: 'image/webp',\n  mask: [0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n  byte: [0x52, 0x49, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x57, 0x45, 0x42, 0x50, 0x56, 0x50]\n}, {\n  name: 'image/png',\n  mask: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n  byte: [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]\n}, {\n  name: 'image/jpeg',\n  mask: [0xff, 0xff, 0xff],\n  byte: [0xff, 0xd8, 0xff]\n}];\n/** 判断是否是空对象 */\n\nexport function isEmptyObj(data) {\n  if (!data) return true;\n  return JSON.stringify(data) === '{}';\n}\n/** 生成随机字符串 */\n\nexport function createId() {\n  return Math.random().toString(36).substring(2);\n}\n/**\n * 检测是否是动图\n * 主要针对 Gif 和 Webp 两种格式\n */\n\nexport function checkIsAnimated(_x) {\n  return _checkIsAnimated.apply(this, arguments);\n}\n/**\n * 检测文件类型\n * 使用文件编码进行检测\n * 支持模式参看: patternMask 定义\n */\n\nfunction _checkIsAnimated() {\n  _checkIsAnimated = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var file, fileUrl, fileType;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            file = _ref.file, fileUrl = _ref.fileUrl, fileType = _ref.fileType;\n\n            if (!(!file || !(file instanceof File))) {\n              _context.next = 4;\n              break;\n            }\n\n            console.error('isAnimated param check fail: param expected to be File object');\n            return _context.abrupt(\"return\", false);\n\n          case 4:\n            if (!(fileType !== 'image/webp' && fileType !== 'image/gif')) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 6:\n            if (!(fileType === 'image/webp')) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", new Promise(function (resolve) {\n              var request = new XMLHttpRequest();\n              request.open('GET', fileUrl, true);\n              request.addEventListener('load', function () {\n                resolve(request.response.indexOf('ANMF') !== -1);\n              });\n              request.send();\n            }));\n\n          case 8:\n            if (!(fileType === 'image/gif')) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\", new Promise(function (resolve) {\n              var request = new XMLHttpRequest();\n              request.open('GET', fileUrl, true);\n              request.responseType = 'arraybuffer';\n              request.addEventListener('load', function () {\n                var arr = new Uint8Array(request.response); // make sure it's a gif (GIF8)\n\n                if (arr[0] !== 0x47 || arr[1] !== 0x49 || arr[2] !== 0x46 || arr[3] !== 0x38) {\n                  resolve(false);\n                  return;\n                } // ported from php http://www.php.net/manual/en/function.imagecreatefromgif.php#104473\n                // an animated gif contains multiple \"frames\", with each frame having a\n                // header made up of:\n                // * a static 4-byte sequence (\\x00\\x21\\xF9\\x04)\n                // * 4 variable bytes\n                // * a static 2-byte sequence (\\x00\\x2C) (some variants may use \\x00\\x21 ?)\n                // We read through the file til we reach the end of the file, or we've found\n                // at least 2 frame headers\n\n\n                var frames = 0;\n\n                for (var i = 0, len = arr.length - 9; i < len && frames < 2; ++i) {\n                  if (arr[i] === 0x00 && arr[i + 1] === 0x21 && arr[i + 2] === 0xf9 && arr[i + 3] === 0x04 && arr[i + 8] === 0x00 && (arr[i + 9] === 0x2c || arr[i + 9] === 0x21)) {\n                    frames++;\n                  }\n                } // if frame count > 1, it's animated\n\n\n                resolve(frames > 1);\n              });\n              request.send();\n            }));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _checkIsAnimated.apply(this, arguments);\n}\n\nexport function getFileType(_x2) {\n  return _getFileType.apply(this, arguments);\n}\n\nfunction _getFileType() {\n  _getFileType = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(file) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (file instanceof File) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", 'unknown');\n\n          case 2:\n            return _context2.abrupt(\"return\", new Promise(function (resolve) {\n              var fileReader = new FileReader();\n\n              fileReader.onloadend = function (e) {\n                var header = new Uint8Array(e.target.result).slice(0, 20);\n                var type = 'unknown'; // eslint-disable-next-line arrow-body-style\n\n                var index = patternMask.findIndex(function (item) {\n                  // eslint-disable-next-line arrow-body-style\n                  return item.mask.every(function (subItem, subI) {\n                    // subItem 掩码标志\n                    // item.byte[subI] 规范值\n                    // header[subI] 文件实际值\n                    // eslint-disable-next-line\n                    return (subItem & (header[subI] ^ item.byte[subI])) === 0;\n                  });\n                });\n\n                if (index >= 0) {\n                  type = patternMask[index].name;\n                }\n\n                resolve(type);\n              };\n\n              fileReader.readAsArrayBuffer(file);\n            }));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getFileType.apply(this, arguments);\n}",null]}