{"remainingRequest":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/thread-loader/dist/cjs.js!/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/babel-loader/lib/index.js!/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/lyntest/lyntest-vue/src/component/base/upload-image/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/src/component/base/upload-image/index.vue","mtime":1606834545508},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getFileType, checkIsAnimated, isEmptyObj, createId } from './utils';\n/**\n * 本地图像通过验证后构造的信息对象\n * @typedef {Object<string, number, any>} LocalFileInfo\n * @property {string} localSrc 本地图像预览地址\n * @property {File} file 本地图像文件\n * @property {number} width 宽\n * @property {number} height 高\n * @property {string} name 文件名\n * @property {number} size 文件大小\n * @property {string} type 文件的媒体类型 (MIME)\n * @property {Date} lastModified 文件最后修改时间\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\n */\n\n/**\n * 返回数据对象\n * 初始化的图片如果没有传入字段, 则值为空 null\n * @typedef {Object<string, number>} ReturnItem\n * @property {number|string} id 初始化数据的 id\n * @property {number|string} imgId 图像资源 id\n * @property {string} src 文件相对路径\n * @property {string} display 图像完整地址\n * @property {number} height 高\n * @property {number} width 宽\n * @property {string} fileName 文件名\n * @property {string} fileType 文件的媒体类型 (MIME), 针对部分文件类型做了检测\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\n */\n\n/**\n * 返回数据对象\n * @typedef {Object} ValidateRule\n * @property {array|number} ratio 比例 [宽，高], 或者 宽/高 的数值\n * @property {number} width 宽度必需等于\n * @property {number} height 高度必需等于\n * @property {number} minWidth 最小宽\n * @property {number} minHeight 最小高\n * @property {number} minSize 最小 size（Mb)\n * @property {number} maxSize 最大 size（Mb)\n * @property {number} allowAnimated 是否允许上传动图, 0 不检测, 1 不允许动图, 2 只允许动图. 要检查此项, 需设置属性 animated-check 为 true\n */\n\nvar ONE_KB = 1024;\nvar ONE_MB = ONE_KB * 1024;\n/**\n * 创建项, 如不传入参数则创建空项\n * status 状态转换说明:\n *  - 如果不传入参数, 创建上传空项, status: input\n *  - 如果只传入 data, 不传入 oldData\n *    - data 是本地数据(数据中是否携带id), status: new\n *    - data 不是本地数据(来源可能是初始化或是其他), status 与原状态保持一致, 如果没有原状态就是 init\n *  - data 与 oldData 都传入\n *    - data 为本地数据, oldData 是 input/new, status: new\n *    - data 为本地数据, oldData 是 init/edit, status: edit\n *    - data 不是本地数据, status 与原状态保持一致, 如果没有原状态就是 init\n * @returns {Item}\n */\n\nfunction createItem() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var oldData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var item = {\n    loading: false,\n    id: createId(),\n    status: 'input',\n    // new/edit/del/init/input\n    src: '',\n    // 图像相对地址\n    display: '',\n    // 图像完整地址, 用于显示\n    imgId: '' // 图像资源 id\n    // 未传入data, 说明是单纯新建, 单纯新建的值是输入框状态\n\n  };\n\n  if (!data) {\n    return item;\n  } // 判断是否是本地图片\n\n\n  if (data.file && !data.id) {\n    if (!isEmptyObj(oldData)) {\n      // 如果旧数据状态是输入框, 则为新图片\n      if (oldData.status === 'input' || oldData.status === 'new') {\n        item.status = 'new';\n      } // 如果旧数据状态是初始化 init, 则为修改\n\n\n      if (oldData.status === 'init' || oldData.status === 'edit') {\n        item.status = 'edit';\n      }\n    } else {\n      item.status = 'new';\n    } // 本地数据初始化\n\n\n    item.id = oldData.id || item.id;\n    item.src = '';\n    item.imgId = '';\n    item.display = data.localSrc || item.display;\n    item = Object.assign({}, data, item);\n    return item;\n  } // 存在id, 说明是传入已存在数据\n\n\n  item.id = data.id || createId();\n  item.imgId = data.imgId || item.imgId;\n  item.src = data.src || item.src;\n  item.display = data.display || item.display;\n  item.status = data.status || 'init';\n  item = Object.assign({}, data, item);\n  return item;\n}\n/**\n * 获取范围类型限制的提示文本\n * @param {String} prx 提示前缀\n * @param {Number} min 范围下限\n * @param {Number} max 范围上限\n * @param {String} unit 单位\n */\n\n\nfunction getRangeTip(prx, min, max) {\n  var unit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var str = prx;\n\n  if (min && max) {\n    // 有范围限制\n    str += \" \".concat(min).concat(unit, \"~\").concat(max).concat(unit);\n  } else if (min) {\n    // 只有最小范围\n    str += \" \\u2265 \".concat(min).concat(unit);\n  } else if (max) {\n    // 只有最大范围\n    str += \" \\u2264 \".concat(max).concat(unit);\n  } else {\n    // 无限制\n    str += '无限制';\n  }\n\n  return str;\n}\n/** for originUpload: 一次请求最多的文件数量 */\n\n\nvar uploadLimit = 10;\n/** for originUpload: 文件对象缓存 */\n\nvar catchData = [];\n/** for originUpload: 计时器缓存 */\n\nvar time;\nexport default {\n  name: 'UploadImgs',\n  data: function data() {\n    return {\n      itemList: [],\n      loading: false,\n      currentId: '',\n      // 正在操作项的id\n      globalImgPriview: '$imagePreview' // 全局图片预览方法名\n\n    };\n  },\n  props: {\n    /** 每一项宽度 */\n    width: {\n      type: [Number, String],\n      default: 160\n    },\n\n    /** 每一项高度 */\n    height: {\n      type: [Number, String],\n      default: 160\n    },\n\n    /** 是否开启自动上传 */\n    autoUpload: {\n      type: Boolean,\n      default: true\n    },\n\n    /** 初始化数据 */\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n\n    /** 接受的文件类型 */\n    accept: {\n      type: String,\n      default: 'image/*'\n    },\n\n    /** 最少图片数量 */\n    minNum: {\n      type: Number,\n      default: 0\n    },\n\n    /** 最多图片数量, 0 表示无限制 */\n    maxNum: {\n      type: Number,\n      default: 0\n    },\n\n    /** 是否可排序 */\n    sortable: {\n      type: Boolean,\n      default: false\n    },\n\n    /** 是否可预览 */\n    preview: {\n      type: Boolean,\n      default: true\n    },\n\n    /** 是否可以一次多选 */\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n\n    /** 图像验证规则 */\n    rules: {\n      type: [Object, Function],\n      default: function _default() {\n        return {\n          maxSize: 2\n        };\n      }\n    },\n\n    /** 是否禁用, 禁用后只可展示 不可进行编辑操作, 包括: 新增, 修改, 删除, 改变顺序 */\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n\n    /** 上传前插入方法, 属于高级用法 */\n    beforeUpload: {\n      type: Function,\n      default: null\n    },\n\n    /** 重写上传方法, 如果重写则覆盖组件内上传方法 */\n    remoteFuc: {\n      type: Function,\n      default: null\n    },\n\n    /** 图像显示模式 */\n    fit: {\n      type: String,\n      default: 'contain'\n    },\n\n    /** 检测是否是动图 */\n    animatedCheck: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    /** 每项容器样式 */\n    boxStyle: function boxStyle() {\n      var width = this.width,\n          height = this.height,\n          disabled = this.disabled;\n      var style = {};\n\n      if (typeof width === 'number') {\n        style.width = \"\".concat(width, \"px\");\n      } else if (typeof width === 'string') {\n        style.width = width;\n      }\n\n      if (typeof height === 'number') {\n        style.height = \"\".concat(height, \"px\");\n      } else if (typeof height === 'string') {\n        style.height = height;\n      }\n\n      if (disabled) {\n        style.cursor = 'not-allowed';\n      } else {\n        style.cursor = 'pointer';\n      }\n      /** 提示字体最大尺寸 */\n\n\n      var fontSize = 12;\n      /** 每行提示预设 */\n\n      var maxText = 8;\n\n      if (typeof width === 'number' && width / maxText < fontSize) {\n        fontSize = (width / maxText).toFixed(2);\n      }\n\n      style.fontSize = \"\".concat(fontSize, \"px\");\n      style.textAlign = 'center';\n      style.position = 'relative';\n      style.display = 'flex';\n      style.alignItems = 'center';\n      style.justifyContent = 'center';\n      style.overflow = 'hidden';\n      style.lineHeight = '1.3';\n      style.flexDirection = 'column';\n      return style;\n    },\n\n    /**\n     * 上传图像数量下限\n     * @returns {Number}\n     */\n    min: function min() {\n      var minNum = this.minNum;\n      return minNum < 0 ? 0 : parseInt(minNum, 10);\n    },\n\n    /**\n     * 上传图像数量上限\n     * @returns {Number}\n     */\n    max: function max() {\n      var min = this.min,\n          maxNum = this.maxNum; // 兼容用最大值小于最小值情况\n\n      return maxNum < min ? min : parseInt(maxNum, 10);\n    },\n\n    /**\n     * 是否是固定数量(最小等于最大)\n     * @returns {Boolean}\n     */\n    isStable: function isStable() {\n      var min = this.min,\n          max = this.max;\n      return max !== 0 && min === max;\n    },\n\n    /** 构造图像规范提示 */\n    rulesTip: function rulesTip() {\n      var rules = this.rules;\n      var tips = [];\n      /** 图像验证规则 */\n\n      var basicRule; // 针对动态规则模式, 获取输入为空时的规则\n      // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\n\n      if (typeof rules === 'function') {\n        try {\n          basicRule = rules();\n        } catch (err) {\n          basicRule = {};\n        }\n      } else {\n        basicRule = rules || {};\n      } // 宽高限制提示语\n\n\n      if (basicRule.width && basicRule.height) {\n        // 固定宽高限制\n        tips.push(\"\\u5BBD\\u9AD8 \".concat(basicRule.width, \"x\").concat(basicRule.height));\n      } else if (basicRule.width) {\n        // 固定宽限制\n        tips.push(\"\\u5BBD\\u5EA6 \".concat(basicRule.width));\n        tips.push(\"\".concat(getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)));\n      } else if (basicRule.height) {\n        // 固定高限制\n        tips.push(\"\\u9AD8\\u5EA6 \".concat(basicRule.height));\n        tips.push(\"\".concat(getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)));\n      } else {\n        // 宽高都不固定\n        tips.push(\"\".concat(getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)));\n        tips.push(\"\".concat(getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)));\n      } // 宽高比限制提示语\n\n\n      if (basicRule.ratio) {\n        if (Array.isArray(basicRule.ratio)) {\n          tips.push(\"\\u5BBD\\u9AD8\\u6BD4 \".concat(basicRule.ratio.join(':')));\n        } else {\n          tips.push(\"\\u5BBD\\u9AD8\\u6BD4 \".concat(basicRule.ratio));\n        }\n      } // 文件大小\n\n\n      if (basicRule.minSize || basicRule.maxSize) {\n        tips.push(getRangeTip('文件大小', basicRule.minSize, basicRule.maxSize, 'Mb'));\n      } // 是否动态图\n\n\n      if (basicRule.allowAnimated && basicRule.allowAnimated > 0) {\n        if (basicRule.allowAnimated === 1) {\n          tips.push('不允许上传动图');\n        } else if (basicRule.allowAnimated === 1) {\n          tips.push('只允许上传动图');\n        }\n      }\n\n      return tips;\n    }\n  },\n  watch: {\n    /** 初始化值修改时重新初始化, 并且清空当前的编辑状态 */\n    value: function value(val) {\n      // 初始化数据\n      this.initItemList(val);\n    }\n  },\n  mounted: function mounted() {\n    this.initItemList(this.value);\n  },\n  methods: {\n    /**\n     * 上传缓存中的图片\n     * @param {Array} uploadList 需要上传的缓存集合, 集合中包含回调函数\n     */\n    uploadCatch: function uploadCatch(uploadList) {\n      var _this = this;\n\n      var data = {};\n      uploadList.forEach(function (item, index) {\n        data[\"file_\".concat(index)] = item.img.file;\n      });\n      return this.$axios({\n        method: 'post',\n        url: '/cms/file',\n        data: data\n      }).then(function (res) {\n        if (!Array.isArray(res) || res.length === 0) {\n          throw new Error('图像上传失败');\n        }\n\n        var resObj = res.reduce(function (acc, item) {\n          acc[item.key] = item;\n          return acc;\n        }, {});\n        uploadList.forEach(function (item, index) {\n          var remoteData = resObj[\"file_\".concat(index)];\n          item.cb(remoteData);\n        });\n      }).catch(function (err) {\n        uploadList.forEach(function (item) {\n          item.cb(false);\n        });\n        var msg = '图像上传失败, 请重试';\n\n        if (err.message) {\n          // eslint-disable-next-line\n          msg = err.message;\n        }\n\n        console.error(err);\n\n        _this.$message.error(msg);\n      });\n    },\n\n    /**\n     * 内置上传文件方法, 使用 debounce 优化提交效率\n     * 此处只能使用回调模式, 因为涉及 debounce 处理, promise 不可在外部改变其状态\n     * @param {Object} img 需要上传的数据项\n     * @param {Function} cb 回调函数\n     */\n    originUpload: function originUpload(img, cb) {\n      var _this2 = this;\n\n      // 并且一次最多上传文件数量设为可配置\n      // 添加缓存\n      catchData.push({\n        img: img,\n        cb: cb\n      }); // 等于上限, 立即上传\n\n      if (catchData.length === uploadLimit) {\n        var data = _toConsumableArray(catchData);\n\n        catchData = [];\n        clearTimeout(time);\n        time = null;\n        return this.uploadCatch(data);\n      } // 清除上次一的定时器\n\n\n      if (time && catchData.length < uploadLimit) {\n        clearTimeout(time); // 此时修改上一个 promise 状态为reslove\n      } // 等待100ms\n\n\n      time = setTimeout(function () {\n        _this2.uploadCatch(_toConsumableArray(catchData));\n\n        catchData = [];\n        time = null;\n      }, 50);\n    },\n\n    /**\n     * 上传图像文件\n     * @param {Object} 需要上传的项, 包含文化和其它信息\n     */\n    uploadImg: function () {\n      var _uploadImg = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(item) {\n        var _this3 = this;\n\n        var reduceResult, result, _result;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // 远程结果处理\n                reduceResult = function reduceResult(imgItem, res) {\n                  // eslint-disable-next-line\n                  imgItem.loading = false;\n\n                  if (!res) {\n                    return;\n                  } // eslint-disable-next-line\n\n\n                  imgItem.display = res.url; // eslint-disable-next-line\n\n                  imgItem.src = res.path; // eslint-disable-next-line\n\n                  imgItem.imgId = res.id; // eslint-disable-next-line\n\n                  imgItem.file = null;\n                  window.URL.revokeObjectURL(imgItem.display);\n                };\n\n                if (!(item.status === 'input' || !item.file)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                // eslint-disable-next-line\n                item.loading = true;\n\n                if (!(this.beforeUpload && typeof this.beforeUpload === 'function')) {\n                  _context.next = 12;\n                  break;\n                }\n\n                if (!(typeof this.beforeUpload === 'function')) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 8;\n                return new Promise(function (resolve) {\n                  var beforeUploadResult;\n\n                  try {\n                    beforeUploadResult = _this3.beforeUpload(item, function (data) {\n                      resolve(!!data);\n                    });\n                  } catch (err) {\n                    resolve(false);\n                  } // promise 模式\n\n\n                  if (beforeUploadResult != null && typeof beforeUploadResult.then === 'function') {\n                    beforeUploadResult.then(function (remoteData) {\n                      resolve(!!remoteData);\n                    }).catch(function () {\n                      resolve(false);\n                    });\n                  }\n                });\n\n              case 8:\n                result = _context.sent;\n\n                if (result) {\n                  _context.next = 12;\n                  break;\n                }\n\n                reduceResult(item, false);\n                return _context.abrupt(\"return\", false);\n\n              case 12:\n                if (!(this.remoteFuc && typeof this.remoteFuc === 'function')) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.next = 15;\n                return new Promise(function (resolve) {\n                  var remoteFucResult;\n\n                  try {\n                    remoteFucResult = _this3.remoteFuc(item.file, function (remoteData) {\n                      resolve(remoteData || false);\n                    });\n                  } catch (err) {\n                    _this3.$message.error('执行自定义上传出错');\n\n                    resolve(false);\n                  } // promise 模式\n\n\n                  if (remoteFucResult != null && typeof remoteFucResult.then === 'function') {\n                    remoteFucResult.then(function (remoteData) {\n                      resolve(remoteData || false);\n                    }).catch(function () {\n                      resolve(false);\n                    });\n                  }\n                });\n\n              case 15:\n                _result = _context.sent;\n                reduceResult(item, _result);\n\n                if (_result) {\n                  _context.next = 19;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 19:\n                return _context.abrupt(\"return\", item);\n\n              case 20:\n                return _context.abrupt(\"return\", new Promise(function (resolve) {\n                  _this3.originUpload(item, function (data) {\n                    reduceResult(item, data);\n\n                    if (!data) {\n                      resolve(false);\n                    } else {\n                      resolve(item);\n                    }\n                  });\n                }));\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function uploadImg(_x) {\n        return _uploadImg.apply(this, arguments);\n      }\n\n      return uploadImg;\n    }(),\n\n    /**\n     * 获取当前组件数据\n     */\n    getValue: function () {\n      var _getValue = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var itemList, isStable, min, l, i, asyncList, _i, imgInfoList, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                itemList = this.itemList, isStable = this.isStable, min = this.min; // 检查是否有不符合要求的空项\n\n                l = isStable ? itemList.length : itemList.length - 1;\n                i = 0;\n\n              case 3:\n                if (!(i < l)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                if (!(itemList[i].status === 'input')) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                this.$message.error('当前存在未选择图片, 请全部选择');\n                return _context2.abrupt(\"return\", false);\n\n              case 7:\n                i += 1;\n                _context2.next = 3;\n                break;\n\n              case 10:\n                if (!(l < min)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                this.$message.error(\"\\u81F3\\u5C11\\u9009\\u62E9\".concat(min, \"\\u5F20\\u56FE\\u7247\"));\n                return _context2.abrupt(\"return\", false);\n\n              case 13:\n                // 提取需要上传文件\n                asyncList = [];\n\n                for (_i = 0; _i < itemList.length; _i += 1) {\n                  // 跳过上传组件\n                  if (itemList[_i].status !== 'input') {\n                    if (!itemList[_i].file) {\n                      asyncList.push(Promise.resolve(itemList[_i]));\n                    } else {\n                      // 上传文件后获取对应key值\n                      asyncList.push(this.uploadImg(itemList[_i]));\n                    }\n                  }\n                }\n\n                _context2.next = 17;\n                return Promise.all(asyncList);\n\n              case 17:\n                imgInfoList = _context2.sent;\n\n                if (!imgInfoList.some(function (item) {\n                  return !item;\n                })) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 20:\n                // 如无错误, 表示图像都以上传, 开始构造数据\n\n                /**\n                 * @type {array<ReturnItem>}\n                 */\n                result = imgInfoList.map(function (item) {\n                  /** @type {ReturnItem} */\n                  var val = {\n                    id: item.status === 'new' ? '' : item.id,\n                    imgId: item.imgId || null,\n                    src: item.src || null,\n                    display: item.display,\n                    width: item.width || null,\n                    height: item.height || null,\n                    fileSize: item.size || null,\n                    fileName: item.name || null,\n                    fileType: item.type || null,\n                    isAnimated: item.isAnimated || null\n                  };\n                  return val;\n                }); // 获取数据成功后发出\n\n                this.$emit('upload', result);\n                return _context2.abrupt(\"return\", result);\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getValue() {\n        return _getValue.apply(this, arguments);\n      }\n\n      return getValue;\n    }(),\n\n    /**\n     * 删除某项\n     * @param {Number|String} id 删除项 id\n     */\n    delItem: function delItem(id) {\n      var itemList = this.itemList,\n          isStable = this.isStable; // 根据id找到对应项\n\n      var index = itemList.findIndex(function (item) {\n        return item.id === id;\n      });\n      var blobUrl = itemList[index].display;\n\n      if (isStable) {\n        // 固定数量图片, 删除后留下空项\n        itemList[index] = createItem();\n        this.itemList = _toConsumableArray(itemList);\n      } else {\n        itemList.splice(index, 1);\n      } // 释放内存\n\n\n      window.URL.revokeObjectURL(blobUrl);\n      this.initItemList(this.itemList);\n    },\n\n    /**\n     * 预览图像\n     * @param {Object} data 需要预览的项的数据\n     * @param {Number} index 索引序号\n     */\n    previewImg: function previewImg(data, index) {\n      // 如果有全局预览方法\n      if (this[this.globalImgPriview]) {\n        var images = [];\n        this.itemList.forEach(function (element) {\n          if (element.display) {\n            images.push(element.display);\n          }\n        });\n        this[this.globalImgPriview]({\n          images: images,\n          index: index\n        });\n      } else {\n        // element 原生粗糙模式\n        this.$confirm(\"<img src=\\\"\".concat(data.display, \"\\\" style=\\\"width: 100%;\\\" />\"), '预览', {\n          dangerouslyUseHTMLString: true\n        });\n      }\n    },\n\n    /**\n     * 移动图像位置\n     * @param {Number|String} id 操作项的 id\n     * @param {Number} step 移动的偏移量\n     */\n    move: function move(id, step) {\n      var itemList = this.itemList,\n          isStable = this.isStable; // 找到操作的元素\n\n      var index = itemList.findIndex(function (item) {\n        return item.id === id;\n      }); // 边界检测\n\n      if (index + step < 0 || index + step >= itemList.length) return; // 非固定项时, 不可和最后一项输入换位子\n\n      if (!isStable && index + step === itemList.length - 1) {\n        if (itemList[itemList.length - 1].status === 'input') return;\n      }\n\n      var i = itemList[index];\n      var j = itemList[index + step];\n      itemList[index] = j;\n      itemList[index + step] = i;\n      this.itemList = _toConsumableArray(itemList);\n    },\n\n    /**\n     * 验证上传的图像是否符合要求\n     * @param {LocalFileInfo} imgInfo 图像信息, 包括文件名, 宽高\n     */\n    validateImg: function () {\n      var _validateImg = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(imgInfo) {\n        var rules, rule, ratio;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                rules = this.rules;\n                /** @type ValidateRule */\n\n                // 针对动态规则模式, 获取输入为空时的规则\n                // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\n                if (typeof rules === 'function') {\n                  try {\n                    rule = rules(imgInfo);\n                  } catch (err) {\n                    rule = {};\n                  }\n                } else {\n                  rule = rules;\n                }\n\n                if (!(rule.allowAnimated && rule.allowAnimated > 0)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                if (!(imgInfo.isAnimated === null)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                this.$message.error('要进行是否动图验证需要配置 \"animated-check\" 属性为 true');\n                _context3.next = 11;\n                break;\n\n              case 7:\n                if (!(rule.allowAnimated === 1 && imgInfo.isAnimated)) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u4E3A\\u52A8\\u6001\\u56FE, \\u4E0D\\u5141\\u8BB8\\u4E0A\\u4F20\"));\n\n              case 9:\n                if (!(rule.allowAnimated === 2 && !imgInfo.isAnimated)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u4E3A\\u9759\\u6001\\u56FE, \\u53EA\\u5141\\u8BB8\\u4E0A\\u4F20\\u52A8\\u6001\\u56FE\"));\n\n              case 11:\n                if (!rule.width) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                if (!(imgInfo.width !== rule.width)) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u5BBD\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u9700\\u4E3A\").concat(rule.width));\n\n              case 14:\n                _context3.next = 20;\n                break;\n\n              case 16:\n                if (!(rule.minWidth && imgInfo.width < rule.minWidth)) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u5BBD\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u5C11\\u4E3A\").concat(rule.minWidth));\n\n              case 18:\n                if (!(rule.maxWidth && imgInfo.width > rule.maxWidth)) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u5BBD\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u591A\\u4E3A\").concat(rule.maxWidth));\n\n              case 20:\n                if (!rule.height) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                if (!(imgInfo.height !== rule.height)) {\n                  _context3.next = 23;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u9AD8\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u9700\\u4E3A\").concat(rule.height));\n\n              case 23:\n                _context3.next = 29;\n                break;\n\n              case 25:\n                if (!(rule.minHeight && imgInfo.height < rule.minHeight)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u9AD8\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u5C11\\u4E3A\").concat(rule.minHeight));\n\n              case 27:\n                if (!(rule.maxHeight && imgInfo.height > rule.maxHeight)) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u9AD8\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u591A\\u4E3A\").concat(rule.maxHeight));\n\n              case 29:\n                if (!rule.ratio) {\n                  _context3.next = 34;\n                  break;\n                }\n\n                if (Array.isArray(rule.ratio)) {\n                  ratio = rule.ratio[0] / rule.ratio[1];\n                } else {\n                  // eslint-disable-next-line\n                  ratio = rule.ratio;\n                }\n\n                ratio = ratio.toFixed(2);\n\n                if (!((imgInfo.width / imgInfo.height).toFixed(2) !== ratio)) {\n                  _context3.next = 34;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u5BBD\\u9AD8\\u6BD4\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u9700\\u4E3A\").concat(ratio));\n\n              case 34:\n                if (!(rule.minSize && imgInfo.size < rule.minSize * ONE_MB)) {\n                  _context3.next = 36;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u6587\\u4EF6\\u5927\\u5C0F\\u6BD4\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u5C11\\u4E3A\").concat(rule.minSize, \"Mb\"));\n\n              case 36:\n                if (!(rule.maxSize && imgInfo.size > rule.maxSize * ONE_MB)) {\n                  _context3.next = 38;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u6587\\u4EF6\\u5927\\u5C0F\\u6BD4\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u591A\\u4E3A\").concat(rule.maxSize, \"Mb\"));\n\n              case 38:\n                return _context3.abrupt(\"return\", true);\n\n              case 39:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function validateImg(_x2) {\n        return _validateImg.apply(this, arguments);\n      }\n\n      return validateImg;\n    }(),\n\n    /**\n     * 选择图像文件后处理, 包括获取图像信息, 验证图像等\n     * @param {Event} e input change 事件对象\n     */\n    handleChange: function () {\n      var _handleChange = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(e) {\n        var _this4 = this;\n\n        var currentId, autoUpload, files, imgInfoList, cache, handleImg, asyncList, i, _i2;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                currentId = this.currentId, autoUpload = this.autoUpload;\n                files = e.target.files;\n\n                if (files) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 4:\n                /** 中间步骤缓存, 在出错时用于释放 createObjectURL 的内存 */\n                cache = [];\n                /**\n                 * 处理单个图片, 返回处理成功的图片数据\n                 * @param {File} file 图片文件\n                 */\n\n                handleImg =\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee4(file) {\n                    var info;\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            _context4.prev = 0;\n                            _context4.next = 3;\n                            return _this4.getImgInfo(file);\n\n                          case 3:\n                            info = _context4.sent;\n                            cache.push(info); // 验证图像信息\n\n                            _context4.next = 7;\n                            return _this4.validateImg(info);\n\n                          case 7:\n                            return _context4.abrupt(\"return\", info);\n\n                          case 10:\n                            _context4.prev = 10;\n                            _context4.t0 = _context4[\"catch\"](0);\n                            throw _context4.t0;\n\n                          case 13:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4, null, [[0, 10]]);\n                  }));\n\n                  return function handleImg(_x4) {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n\n                asyncList = [];\n\n                for (i = 0; i < files.length; i += 1) {\n                  asyncList.push(handleImg(files[i]));\n                }\n\n                _context5.prev = 8;\n                _context5.next = 11;\n                return Promise.all(asyncList);\n\n              case 11:\n                imgInfoList = _context5.sent;\n                // 设置图片信息\n                this.setImgInfo(imgInfoList, currentId); // 开启自动上传\n\n                if (autoUpload) {\n                  this.itemList.forEach(function (ele) {\n                    _this4.uploadImg(ele);\n                  });\n                }\n\n                _context5.next = 22;\n                break;\n\n              case 16:\n                _context5.prev = 16;\n                _context5.t0 = _context5[\"catch\"](8);\n\n                // 清空缓存\n                for (_i2 = 0; _i2 < cache.length; _i2 += 1) {\n                  window.URL.revokeObjectURL(cache[_i2].localSrc);\n                }\n\n                cache = null;\n                console.error(_context5.t0);\n                this.$message.error(_context5.t0.message);\n\n              case 22:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[8, 16]]);\n      }));\n\n      function handleChange(_x3) {\n        return _handleChange.apply(this, arguments);\n      }\n\n      return handleChange;\n    }(),\n\n    /**\n     * 根据信息列表设置图像信息\n     * 用户选择图片, 图片通过验证后可获取到图像信息数组\n     * 将这一组图像信息数据设置在 itemList 中\n     * @param {Array<LocalFileInfo>} imgInfoList 需要设置的图像数组\n     * @param {Number|String} id 操作项的 id\n     */\n    setImgInfo: function setImgInfo() {\n      var imgInfoList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var currentId = arguments.length > 1 ? arguments[1] : undefined;\n      var max = this.max,\n          itemList = this.itemList; // 找到特定图像位置\n\n      var index = this.itemList.findIndex(function (item) {\n        return item.id === currentId;\n      }); // 释放内存\n\n      window.URL.revokeObjectURL(this.itemList[index].display); // 替换图片\n\n      this.itemList[index] = createItem(imgInfoList[0], this.itemList[index]); // 如果需要设置的图像数量大于1, 需要执行追加图片逻辑\n\n      if (imgInfoList.length > 1) {\n        // 最大图片数量限制\n        var l = imgInfoList.length;\n\n        if (this.isStable) {\n          // 固定数量模式, 按次序插入空项\n          for (var i = 0, k = 1; i < max && k < l; i += 1) {\n            if (itemList[i].status === 'input') {\n              this.itemList[i] = createItem(imgInfoList[k]);\n              k += 1;\n            }\n          }\n        } else {\n          var empty = max - itemList.length;\n\n          if (max && l > empty) {\n            l = empty;\n          }\n\n          if (itemList[itemList.length - 1].status === 'input') {\n            this.itemList.pop();\n          }\n\n          for (var _i3 = 1; _i3 <= l; _i3 += 1) {\n            this.itemList.push(createItem(imgInfoList[_i3]));\n          }\n        }\n      } // 初始化图片\n\n\n      this.initItemList(this.itemList);\n    },\n\n    /**\n     * 支持键盘操作\n     * @param {Event} e 键盘事件对象\n     * @param {Number|String} id 操作项的 id\n     */\n    handleKeydown: function handleKeydown(e, id) {\n      if (e.target !== e.currentTarget) return;\n\n      if (e.keyCode === 13 || e.keyCode === 32) {\n        this.handleClick(id);\n      }\n    },\n\n    /**\n     * 处理点击事件, 并转移到文件上传元素\n     * 并记录当前操作元素 id\n     * @param {Number|String} id 操作项的 id\n     */\n    handleClick: function handleClick(id) {\n      if (!this.disabled) {\n        this.currentId = id || '';\n        this.$refs.input.value = null;\n        this.$refs.input.click();\n      }\n    },\n\n    /**\n     * 初始化 itemList\n     * @param {Array} val 初始化的数据数组\n     */\n    initItemList: function initItemList(val) {\n      var max = this.max,\n          isStable = this.isStable,\n          disabled = this.disabled;\n      var result = []; // 初始值不存在情况\n      // 包括初始值不合法\n\n      if (!val || !Array.isArray(val) || val.length === 0) {\n        // 固定数量图像上传, 直接初始化固定数量的上传控件\n        if (isStable) {\n          for (var i = 0; i < max; i += 1) {\n            result.push(createItem());\n          }\n\n          this.itemList = result;\n          return;\n        } // 如果不是固定上传数量, 则仅创建一个空项\n\n\n        result.push(createItem());\n        this.itemList = result;\n        return;\n      } // 存在初始值\n\n\n      for (var _i4 = 0; _i4 < val.length; _i4 += 1) {\n        result.push(createItem(val[_i4]));\n      } // 初始项小于最大数量限制, 并且处于可编辑状态, 并且最后一项不是input\n\n\n      if ((max === 0 || val.length < max) && !disabled && val[val.length - 1].status !== 'input') {\n        // 后面添加空项\n        result.push(createItem());\n      }\n\n      this.itemList = result;\n    },\n\n    /**\n     * 获取图像信息\n     * @param {File} file 文件对象\n     * @returns {LocalFileInfo} 信息对象\n     */\n    getImgInfo: function () {\n      var _getImgInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(file) {\n        var animatedCheck, localSrc, fileType, isAnimated;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                animatedCheck = this.animatedCheck;\n                localSrc = window.URL.createObjectURL(file); // 严格检测文件类型\n\n                _context6.next = 4;\n                return getFileType(file);\n\n              case 4:\n                fileType = _context6.sent;\n                // 检测是否是动图\n                isAnimated = null;\n\n                if (!animatedCheck) {\n                  _context6.next = 10;\n                  break;\n                }\n\n                _context6.next = 9;\n                return checkIsAnimated({\n                  file: file,\n                  fileType: fileType,\n                  fileUrl: localSrc\n                });\n\n              case 9:\n                isAnimated = _context6.sent;\n\n              case 10:\n                return _context6.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var image = new Image();\n                  image.src = localSrc;\n\n                  image.onload = function () {\n                    /**\n                     * @type {LocalFileInfo}\n                     */\n                    var localFileInfo = {\n                      localSrc: localSrc,\n                      file: file,\n                      width: image.width,\n                      height: image.height,\n                      name: file.name,\n                      size: file.size,\n                      type: fileType === 'unknow' ? file.type : fileType,\n                      lastModified: file.lastModified,\n                      isAnimated: isAnimated\n                    };\n                    resolve(localFileInfo);\n                    image = null;\n                  };\n\n                  image.onerror = function () {\n                    reject(new Error('图像加载失败'));\n                    image = null;\n                  };\n                }));\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getImgInfo(_x5) {\n        return _getImgInfo.apply(this, arguments);\n      }\n\n      return getImgInfo;\n    }(),\n\n    /** 清空全部图片 */\n    clear: function clear() {\n      this.initItemList([]);\n      this.getValue();\n    },\n\n    /** 重置图片数据传入属性 */\n    reset: function reset() {\n      this.initItemList(this.value);\n    }\n  }\n};",null]}