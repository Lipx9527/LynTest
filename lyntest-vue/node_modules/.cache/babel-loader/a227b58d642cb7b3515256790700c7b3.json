{"remainingRequest":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/view/sql/batch-execute.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/view/sql/batch-execute.vue","mtime":1606834545571},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { codemirror } from 'vue-codemirror';\nimport DataBase from '@/model/sql/database';\nimport Sql from '@/model/sql/sql'; // require css\n\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/mode/sql/sql.js';\nimport 'codemirror/theme/cobalt.css';\nexport default {\n  components: {\n    codemirror: codemirror\n  },\n  data: function data() {\n    return {\n      database_type: 1,\n      execute_info: {\n        database_id: null,\n        batch_num: 1,\n        sql_value: ''\n      },\n      database_type_list: [{\n        label: 'MySQL',\n        value: 1\n      }, {\n        label: 'Oracle',\n        value: 2\n      }],\n      database_list: [],\n      codemirror_options: {\n        tabSize: 4,\n        mode: 'text/x-mysql',\n        theme: 'cobalt',\n        lineNumbers: true,\n        line: true\n      },\n      sql_list: [],\n      loading: false\n    };\n  },\n  mounted: function mounted() {\n    this.searchDataBaseList();\n  },\n  methods: {\n    searchDataBaseList: function () {\n      var _searchDataBaseList = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return DataBase.searchDBList(this.database_type);\n\n              case 2:\n                res = _context.sent;\n                this.database_list = res;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function searchDataBaseList() {\n        return _searchDataBaseList.apply(this, arguments);\n      }\n\n      return searchDataBaseList;\n    }(),\n    execute: function () {\n      var _execute = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.loading = true;\n                this.sql_list = [];\n                _context2.next = 4;\n                return Sql.batchExecuteSql(this.execute_info);\n\n              case 4:\n                res = _context2.sent;\n\n                if (res.success) {\n                  this.sql_list = res.result;\n                } else {\n                  this.$message.error(res.msg);\n                }\n\n                this.loading = false;\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }\n};",{"version":3,"sources":["batch-execute.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAA,UAAA,QAAA,gBAAA;AACA,OAAA,QAAA,MAAA,sBAAA;AACA,OAAA,GAAA,MAAA,iBAAA,C,CACA;;AACA,OAAA,+BAAA;AACA,OAAA,4BAAA;AACA,OAAA,6BAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,UAAA,EAAA;AADA,GADA;AAIA,EAAA,IAJA,kBAIA;AACA,WAAA;AACA,MAAA,aAAA,EAAA,CADA;AAEA,MAAA,YAAA,EAAA;AACA,QAAA,WAAA,EAAA,IADA;AAEA,QAAA,SAAA,EAAA,CAFA;AAGA,QAAA,SAAA,EAAA;AAHA,OAFA;AAOA,MAAA,kBAAA,EAAA,CAAA;AACA,QAAA,KAAA,EAAA,OADA;AAEA,QAAA,KAAA,EAAA;AAFA,OAAA,EAGA;AACA,QAAA,KAAA,EAAA,QADA;AAEA,QAAA,KAAA,EAAA;AAFA,OAHA,CAPA;AAcA,MAAA,aAAA,EAAA,EAdA;AAeA,MAAA,kBAAA,EAAA;AACA,QAAA,OAAA,EAAA,CADA;AAEA,QAAA,IAAA,EAAA,cAFA;AAGA,QAAA,KAAA,EAAA,QAHA;AAIA,QAAA,WAAA,EAAA,IAJA;AAKA,QAAA,IAAA,EAAA;AALA,OAfA;AAsBA,MAAA,QAAA,EAAA,EAtBA;AAuBA,MAAA,OAAA,EAAA;AAvBA,KAAA;AAyBA,GA9BA;AA+BA,EAAA,OA/BA,qBA+BA;AACA,SAAA,kBAAA;AACA,GAjCA;AAkCA,EAAA,OAAA,EAAA;AACA,IAAA,kBADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEA,QAAA,CAAA,YAAA,CAAA,KAAA,aAAA,CAFA;;AAAA;AAEA,gBAAA,GAFA;AAGA,qBAAA,aAAA,GAAA,GAAA;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAKA,IAAA,OALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,qBAAA,OAAA,GAAA,IAAA;AACA,qBAAA,QAAA,GAAA,EAAA;AAPA;AAAA,uBAQA,GAAA,CAAA,eAAA,CAAA,KAAA,YAAA,CARA;;AAAA;AAQA,gBAAA,GARA;;AASA,oBAAA,GAAA,CAAA,OAAA,EAAA;AACA,uBAAA,QAAA,GAAA,GAAA,CAAA,MAAA;AACA,iBAFA,MAEA;AACA,uBAAA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA;AACA;;AACA,qBAAA,OAAA,GAAA,KAAA;;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlCA,CAAA","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"header\"><div class=\"title\">SQL批量执行</div></div>\n    <div class=\"search-row\">\n      <div>\n        <el-select v-model=\"database_type\" class=\"db-type\" @change=\"searchDataBaseList\">\n          <el-option v-for=\"item in database_type_list\" :key=\"item.value\" :value =\"item.value\" :label =\"item.label\"></el-option>\n        </el-select>\n        <el-select v-model=\"execute_info.database_id\" placeholder=\"数据库筛选\" class=\"db-list\" filterable clearable>\n          <el-option v-for=\"item in database_list\" :key=\"item.id\" :value =\"item.id\" :label =\"item.database_name\"></el-option>\n        </el-select>\n        <el-input-number v-model=\"execute_info.batch_num\" :min=\"1\" :max=\"2000\" class=\"db-list\"></el-input-number>\n      </div>\n      <div class=\"page\">\n        <el-button type=\"primary\" @click=\"execute\" :loading=\"loading\">执 行</el-button>\n      </div>\n    </div>\n    <codemirror class=\"sql-input\" v-model=\"execute_info.sql_value\"  :options=\"codemirror_options\"></codemirror>\n    <div>\n      <div v-for=\"sql in sql_list\" :key=\"sql.index\">\n        <span>{{sql}}</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { codemirror } from 'vue-codemirror'\nimport DataBase from '@/model/sql/database'\nimport Sql from '@/model/sql/sql'\n// require css\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/mode/sql/sql.js'\nimport 'codemirror/theme/cobalt.css'\n\nexport default {\n  components: {\n    codemirror,\n  },\n  data() {\n    return {\n      database_type: 1,\n      execute_info: {\n        database_id: null,\n        batch_num: 1,\n        sql_value: '',\n      },\n      database_type_list: [{\n        label: 'MySQL',\n        value: 1,\n      }, {\n        label: 'Oracle',\n        value: 2,\n      }],\n      database_list: [],\n      codemirror_options: {\n        tabSize: 4,\n        mode: 'text/x-mysql',\n        theme: 'cobalt',\n        lineNumbers: true,\n        line: true,\n      },\n      sql_list: [],\n      loading: false,\n    }\n  },\n  mounted() {\n    this.searchDataBaseList()\n  },\n  methods: {\n    async searchDataBaseList() {\n      const res = await DataBase.searchDBList(this.database_type)\n      this.database_list = res\n    },\n    async execute() {\n      this.loading = true\n      this.sql_list = []\n      const res = await Sql.batchExecuteSql(this.execute_info)\n      if (res.success) {\n        this.sql_list = res.result\n      } else {\n        this.$message.error(res.msg)\n      }\n      this.loading = false\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n//noinspection CssUnknownTarget\n@import \"@/static/css/common.scss\";\n.search-row {\n  display: flex;\n  justify-content: space-between;\n\n  .db-type {\n    width: 100px\n  }\n\n  .db-list {\n    width: 150px;\n    margin-left: 10px\n  }\n\n}\n\n.sql-input {\n  margin-top: 20px;\n}\n</style>\n"],"sourceRoot":"src/view/sql"}]}