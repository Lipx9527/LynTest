{"remainingRequest":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/thread-loader/dist/cjs.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/component/autotest/http-case-edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/component/autotest/http-case-edit.vue","mtime":1608196730000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport VueJsonPretty from 'vue-json-pretty';\nimport Category from '@/model/autotest/category';\nimport HttpCase from '@/model/autotest/http-case';\nimport AssertionsDetail from '@/component/autotest/assertions-detail';\nimport ResponseStatus from '@/component/autotest/response-status';\nexport default {\n  props: {\n    operationType: {\n      type: Number\n    },\n    caseInfo: {\n      type: Object\n    }\n  },\n  components: {\n    VueJsonPretty: VueJsonPretty,\n    AssertionsDetail: AssertionsDetail,\n    ResponseStatus: ResponseStatus\n  },\n  data: function data() {\n    return {\n      case_info: {},\n      category_list: [],\n      default_case_info: {\n        category: '',\n        case_name: '',\n        api_url: 'http://',\n        api_port: null,\n        api_method: 'POST',\n        api_path: '',\n        description: '',\n        header_form: [{\n          enable: true\n        }],\n        body_type: 1,\n        body_value: null,\n        variable_list: [{\n          enable: true\n        }],\n        expected_list: [{\n          enable: true\n        }]\n      },\n      config: {\n        method_list: ['POST', 'GET', 'PUT', 'DELETE'],\n        extract_type_list: [{\n          label: 'JsonPath提取',\n          value: 1\n        }, {\n          label: '正则表达式提取',\n          value: 2\n        }],\n        expected_type_list: [{\n          label: 'equals',\n          value: 1\n        }, {\n          label: 'contains',\n          value: 2\n        }, {\n          label: 'not empty or null',\n          value: 3\n        }]\n      },\n      has_result: false,\n      // 是否进行了请求\n      result: {},\n      result_css: {\n        status_code_type: 'success',\n        time_type: 'success'\n      },\n      result_is_json: false,\n      // 返回body是否为json\n      result_json_path: ''\n    };\n  },\n  mounted: function mounted() {\n    this.getCaseInfo();\n    this.getCategoryInfo();\n  },\n  methods: {\n    getCategoryInfo: function () {\n      var _getCategoryInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Category.getCategoryList();\n\n              case 2:\n                res = _context.sent;\n                this.category_list = res;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getCategoryInfo() {\n        return _getCategoryInfo.apply(this, arguments);\n      }\n\n      return getCategoryInfo;\n    }(),\n    getCaseInfo: function getCaseInfo() {\n      this.case_info = this.operationType === 1 ? _objectSpread({}, this.default_case_info) : _objectSpread({}, this.caseInfo);\n    },\n    caseExecute: function () {\n      var _caseExecute = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return HttpCase.execute(this.case_info);\n\n              case 2:\n                res = _context2.sent;\n                this.result = res; // 如果返回结果为json，则进行格式美化，并展示copy按钮；不为json则直接显示文本内容\n\n                if (this.isJson(res.response_text)) {\n                  this.result.response_text = JSON.parse(res.response_text);\n                  this.result_is_json = true;\n                }\n\n                this.has_result = true;\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function caseExecute() {\n        return _caseExecute.apply(this, arguments);\n      }\n\n      return caseExecute;\n    }(),\n    saveCase: function () {\n      var _saveCase = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.operationType === 2)) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                _context3.next = 3;\n                return HttpCase.updateCase(this.case_info);\n\n              case 3:\n                _context3.t0 = _context3.sent;\n                _context3.next = 9;\n                break;\n\n              case 6:\n                _context3.next = 8;\n                return HttpCase.createCase(this.case_info);\n\n              case 8:\n                _context3.t0 = _context3.sent;\n\n              case 9:\n                res = _context3.t0;\n\n                if (res.code < window.MAX_SUCCESS_CODE) {\n                  this.$message.success(\"\".concat(res.message));\n                  this.$emit('drawer-close');\n                } else {\n                  this.$message.error('服务端异常');\n                }\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function saveCase() {\n        return _saveCase.apply(this, arguments);\n      }\n\n      return saveCase;\n    }(),\n    eleIsDisable: function eleIsDisable(index, data) {\n      return data.length - 1 === index;\n    },\n    deleteRow: function deleteRow(index, data) {\n      data.splice(index, 1);\n    },\n    headerChange: function headerChange() {\n      var isNeedCreate = true;\n      this.case_info.header_form.forEach(function (item) {\n        if (!item.header_key && !item.header_value) {\n          // 没有空行，需要创建空行\n          isNeedCreate = false;\n        }\n      });\n\n      if (isNeedCreate) {\n        this.case_info.header_form.push({\n          enable: true,\n          header_key: '',\n          header_value: ''\n        });\n      }\n    },\n    variableChange: function variableChange() {\n      var isNeedCreate = true;\n      this.case_info.variable_list.forEach(function (item) {\n        if (!item.extract_method && !item.extract_rule && !item.variable_name) {\n          // 没有空行，需要创建空行\n          isNeedCreate = false;\n        }\n      });\n\n      if (isNeedCreate) {\n        this.case_info.variable_list.push({\n          enable: true,\n          extract_method: '',\n          extract_rule: '',\n          variable_name: ''\n        });\n      }\n    },\n    expectedChange: function expectedChange() {\n      var isNeedCreate = true;\n      this.case_info.expected_list.forEach(function (item) {\n        if (!item.extract_method && !item.extract_rule && !item.compare_type && !item.expected_value) {\n          // 没有空行，需要创建空行\n          isNeedCreate = false;\n        }\n      });\n\n      if (isNeedCreate) {\n        this.case_info.expected_list.push({\n          enable: true,\n          extract_method: '',\n          extract_rule: '',\n          compare_type: '',\n          expected_value: ''\n        });\n      }\n    },\n    // 点击json的key，获取jsonpath和data\n    resultTextClick: function resultTextClick(path) {\n      this.result_json_path = path;\n    },\n    // 复制jsonPath\n    copyPath: function copyPath() {\n      var input = document.createElement('input');\n      input.value = this.result_json_path;\n      document.body.appendChild(input);\n      input.select();\n      document.execCommand('Copy');\n      document.body.removeChild(input);\n      this.$message.success('复制成功');\n    },\n    isJson: function isJson(str) {\n      if (typeof str !== 'string') {\n        return false;\n      }\n\n      try {\n        var obj = JSON.parse(str);\n        return !!(_typeof(obj) === 'object' && obj);\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n};",null]}