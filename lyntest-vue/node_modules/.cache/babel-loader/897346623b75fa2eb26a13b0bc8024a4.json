{"remainingRequest":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/thread-loader/dist/cjs.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vuex-persist/dist/esm/index.js","dependencies":[{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vuex-persist/dist/esm/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport lodashMerge from 'lodash.merge';\n/**\r\n * Created by championswimmer on 22/07/17.\r\n */\n\nvar MockStorage; // @ts-ignore\n\n{\n  MockStorage =\n  /*#__PURE__*/\n  function () {\n    function MockStorage() {\n      _classCallCheck(this, MockStorage);\n    }\n\n    _createClass(MockStorage, [{\n      key: \"key\",\n      value: function key(index) {\n        return Object.keys(this)[index];\n      }\n    }, {\n      key: \"setItem\",\n      value: function setItem(key, data) {\n        this[key] = data.toString();\n      }\n    }, {\n      key: \"getItem\",\n      value: function getItem(key) {\n        return this[key];\n      }\n    }, {\n      key: \"removeItem\",\n      value: function removeItem(key) {\n        delete this[key];\n      }\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        for (var _i = 0, _Object$keys = Object.keys(this); _i < _Object$keys.length; _i++) {\n          var key = _Object$keys[_i];\n          delete this[key];\n        }\n      }\n    }, {\n      key: \"length\",\n      get: function get() {\n        return Object.keys(this).length;\n      }\n    }]);\n\n    return MockStorage;\n  }();\n} // tslint:disable: variable-name\n\nvar SimplePromiseQueue =\n/*#__PURE__*/\nfunction () {\n  function SimplePromiseQueue() {\n    _classCallCheck(this, SimplePromiseQueue);\n\n    this._queue = [];\n    this._flushing = false;\n  }\n\n  _createClass(SimplePromiseQueue, [{\n    key: \"enqueue\",\n    value: function enqueue(promise) {\n      this._queue.push(promise);\n\n      if (!this._flushing) {\n        return this.flushQueue();\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"flushQueue\",\n    value: function flushQueue() {\n      var _this = this;\n\n      this._flushing = true;\n\n      var chain = function chain() {\n        var nextTask = _this._queue.shift();\n\n        if (nextTask) {\n          return nextTask.then(chain);\n        } else {\n          _this._flushing = false;\n        }\n      };\n\n      return Promise.resolve(chain());\n    }\n  }]);\n\n  return SimplePromiseQueue;\n}();\n\nfunction merge(into, from) {\n  return lodashMerge({}, into, from);\n}\n\nvar FlattedJSON = JSON;\n/**\r\n * A class that implements the vuex persistence.\r\n * @type S type of the 'state' inside the store (default: any)\r\n */\n\nvar VuexPersistence =\n/**\r\n * Create a {@link VuexPersistence} object.\r\n * Use the <code>plugin</code> function of this class as a\r\n * Vuex plugin.\r\n * @param {PersistOptions} options\r\n */\nfunction VuexPersistence(options) {\n  var _this2 = this;\n\n  _classCallCheck(this, VuexPersistence);\n\n  // tslint:disable-next-line:variable-name\n  this._mutex = new SimplePromiseQueue();\n  /**\r\n   * Creates a subscriber on the store. automatically is used\r\n   * when this is used a vuex plugin. Not for manual usage.\r\n   * @param store\r\n   */\n\n  this.subscriber = function (store) {\n    return function (handler) {\n      return store.subscribe(handler);\n    };\n  };\n\n  if (typeof options === 'undefined') options = {};\n  this.key = options.key != null ? options.key : 'vuex';\n  this.subscribed = false;\n  this.supportCircular = options.supportCircular || false;\n\n  if (this.supportCircular) {\n    FlattedJSON = require('flatted');\n  } // @ts-ignore\n\n\n  if (process.env.NODE_ENV === 'production') {\n    this.storage = options.storage || window.localStorage;\n  } else {\n    // @ts-ignore\n    {\n      this.storage = options.storage || (typeof window !== 'undefined' ? window.localStorage : new MockStorage());\n    }\n  }\n  /**\r\n   * How this works is -\r\n   *  1. If there is options.reducer function, we use that, if not;\r\n   *  2. We check options.modules;\r\n   *    1. If there is no options.modules array, we use entire state in reducer\r\n   *    2. Otherwise, we create a reducer that merges all those state modules that are\r\n   *        defined in the options.modules[] array\r\n   * @type {((state: S) => {}) | ((state: S) => S) | ((state: any) => {})}\r\n   */\n\n\n  this.reducer = options.reducer != null ? options.reducer : options.modules == null ? function (state) {\n    return state;\n  } : function (state) {\n    return options.modules.reduce(function (a, i) {\n      return merge(a, _defineProperty({}, i, state[i]));\n    }, {\n      /* start empty accumulator*/\n    });\n  };\n\n  this.filter = options.filter || function (mutation) {\n    return true;\n  };\n\n  this.strictMode = options.strictMode || false;\n\n  this.RESTORE_MUTATION = function RESTORE_MUTATION(state, savedState) {\n    var mergedState = merge(state, savedState || {});\n\n    for (var _i2 = 0, _Object$keys2 = Object.keys(mergedState); _i2 < _Object$keys2.length; _i2++) {\n      var propertyName = _Object$keys2[_i2];\n\n      this._vm.$set(state, propertyName, mergedState[propertyName]);\n    }\n  };\n\n  this.asyncStorage = options.asyncStorage || false;\n  var storageConfig = this.storage && this.storage._config;\n  this.asyncStorage = this.asyncStorage || (storageConfig && storageConfig.name) === 'localforage';\n\n  if (this.asyncStorage) {\n    /**\r\n     * Async {@link #VuexPersistence.restoreState} implementation\r\n     * @type {((key: string, storage?: Storage) =>\r\n     *      (Promise<S> | S)) | ((key: string, storage: AsyncStorage) => Promise<any>)}\r\n     */\n    this.restoreState = options.restoreState != null ? options.restoreState : function (key, storage) {\n      return storage.getItem(key).then(function (value) {\n        return typeof value === 'string' // If string, parse, or else, just return\n        ? _this2.supportCircular ? FlattedJSON.parse(value || '{}') : JSON.parse(value || '{}') : value || {};\n      });\n    };\n    /**\r\n     * Async {@link #VuexPersistence.saveState} implementation\r\n     * @type {((key: string, state: {}, storage?: Storage) =>\r\n     *    (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\r\n     */\n\n    this.saveState = options.saveState != null ? options.saveState : function (key, state, storage) {\n      return storage.setItem(key, // Second argument is state _object_ if localforage, stringified otherwise\n      (storage && storage._config && storage._config.name) === 'localforage' ? merge({}, state || {}) : _this2.supportCircular ? FlattedJSON.stringify(state) : JSON.stringify(state));\n    };\n    /**\r\n     * Async version of plugin\r\n     * @param {Store<S>} store\r\n     */\n\n    this.plugin = function (store) {\n      _this2.restoreState(_this2.key, _this2.storage).then(function (savedState) {\n        /**\r\n         * If in strict mode, do only via mutation\r\n         */\n        if (_this2.strictMode) {\n          store.commit('RESTORE_MUTATION', savedState);\n        } else {\n          store.replaceState(merge(store.state, savedState || {}));\n        }\n\n        _this2.subscriber(store)(function (mutation, state) {\n          if (_this2.filter(mutation)) {\n            _this2._mutex.enqueue(_this2.saveState(_this2.key, _this2.reducer(state), _this2.storage));\n          }\n        });\n\n        _this2.subscribed = true;\n      });\n    };\n  } else {\n    /**\r\n     * Sync {@link #VuexPersistence.restoreState} implementation\r\n     * @type {((key: string, storage?: Storage) =>\r\n     *    (Promise<S> | S)) | ((key: string, storage: Storage) => (any | string | {}))}\r\n     */\n    this.restoreState = options.restoreState != null ? options.restoreState : function (key, storage) {\n      var value = storage.getItem(key);\n\n      if (typeof value === 'string') {\n        // If string, parse, or else, just return\n        return _this2.supportCircular ? FlattedJSON.parse(value || '{}') : JSON.parse(value || '{}');\n      } else {\n        return value || {};\n      }\n    };\n    /**\r\n     * Sync {@link #VuexPersistence.saveState} implementation\r\n     * @type {((key: string, state: {}, storage?: Storage) =>\r\n     *     (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\r\n     */\n\n    this.saveState = options.saveState != null ? options.saveState : function (key, state, storage) {\n      return storage.setItem(key, // Second argument is state _object_ if localforage, stringified otherwise\n      _this2.supportCircular ? FlattedJSON.stringify(state) : JSON.stringify(state));\n    };\n    /**\r\n     * Sync version of plugin\r\n     * @param {Store<S>} store\r\n     */\n\n    this.plugin = function (store) {\n      var savedState = _this2.restoreState(_this2.key, _this2.storage);\n\n      if (_this2.strictMode) {\n        store.commit('RESTORE_MUTATION', savedState);\n      } else {\n        store.replaceState(merge(store.state, savedState || {}));\n      }\n\n      _this2.subscriber(store)(function (mutation, state) {\n        if (_this2.filter(mutation)) {\n          _this2.saveState(_this2.key, _this2.reducer(state), _this2.storage);\n        }\n      });\n\n      _this2.subscribed = true;\n    };\n  }\n};\n\nexport default VuexPersistence;\nexport { VuexPersistence, MockStorage };",null]}