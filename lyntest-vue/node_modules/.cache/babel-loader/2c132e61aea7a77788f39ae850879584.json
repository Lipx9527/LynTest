{"remainingRequest":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/thread-loader/dist/cjs.js!/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/babel-loader/lib/index.js!/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/lyntest/lyntest-vue/src/view/admin/user/user-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/src/view/admin/user/user-list.vue","mtime":1606834545542},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Admin from '@/lin/model/admin';\nimport LinTable from '@/component/base/table/lin-table';\nimport UserInfo from './user-info';\nimport UserPassword from './user-password';\nexport default {\n  components: {\n    LinTable: LinTable,\n    UserInfo: UserInfo,\n    UserPassword: UserPassword\n  },\n  inject: ['eventBus'],\n  data: function data() {\n    return {\n      id: 0,\n      // 用户id\n      refreshPagination: true,\n      // 页数增加的时候，因为缓存的缘故，需要刷新Pagination组件\n      editIndex: null,\n      // 编辑的行\n      total_nums: 0,\n      // 分组内的用户总数\n      currentPage: 1,\n      // 默认获取第一页的数据\n      pageCount: 10,\n      // 每页10条数据\n      tableData: [],\n      // 表格数据\n      tableColumn: [],\n      // 表头数据\n      operate: [],\n      // 表格按键操作区\n      dialogFormVisible: false,\n      // 控制弹窗显示\n      selectGroup: '',\n      // 选中的分组Id\n      groups: [],\n      // 所有分组\n      group_id: undefined,\n      activeTab: '修改信息',\n      form: {\n        // 表单信息\n        username: '',\n        password: '',\n        confirm_password: '',\n        code: '',\n        group_ids: []\n      },\n      loading: false\n    };\n  },\n  methods: {\n    // 根据分组 刷新/获取分组内的用户\n    getAdminUsers: function () {\n      var _getAdminUsers = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var res, currentPage;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                currentPage = this.currentPage;\n                _context.prev = 1;\n                this.loading = true;\n                _context.next = 5;\n                return Admin.getAdminUsers({\n                  group_id: this.group_id,\n                  count: this.pageCount,\n                  page: currentPage\n                });\n\n              case 5:\n                res = _context.sent;\n                // eslint-disable-line\n                this.loading = false;\n                this.tableData = this.shuffleList(res.items);\n                this.total_nums = res.total;\n                _context.next = 15;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](1);\n                this.loading = false;\n                console.log(_context.t0);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 11]]);\n      }));\n\n      function getAdminUsers() {\n        return _getAdminUsers.apply(this, arguments);\n      }\n\n      return getAdminUsers;\n    }(),\n    // 获取所有分组\n    getAllGroups: function () {\n      var _getAllGroups = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                this.loading = true;\n                _context2.next = 4;\n                return Admin.getAllGroups();\n\n              case 4:\n                this.groups = _context2.sent;\n                this.loading = false;\n                _context2.next = 12;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                this.loading = false;\n                console.log(_context2.t0);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8]]);\n      }));\n\n      function getAllGroups() {\n        return _getAllGroups.apply(this, arguments);\n      }\n\n      return getAllGroups;\n    }(),\n    // 获取所拥有的权限并渲染  由子组件提供\n    handleEdit: function () {\n      var _handleEdit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(val) {\n        var selectedData;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.editIndex = val.index;\n\n                // 单击 编辑按键\n                if (val.index >= 0) {\n                  selectedData = val.row;\n                } else {\n                  // 单击 table row\n                  selectedData = val;\n                }\n\n                this.id = selectedData.id;\n                this.form.username = selectedData.username;\n                this.form.code = selectedData.code;\n                this.form.group_ids = selectedData.groups;\n                this.dialogFormVisible = true;\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleEdit(_x) {\n        return _handleEdit.apply(this, arguments);\n      }\n\n      return handleEdit;\n    }(),\n    // 下拉框选择分组\n    handleChange: function () {\n      var _handleChange = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.currentPage = 1;\n                this.loading = true;\n                _context4.next = 4;\n                return this.getAdminUsers();\n\n              case 4:\n                this.loading = false;\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function handleChange() {\n        return _handleChange.apply(this, arguments);\n      }\n\n      return handleChange;\n    }(),\n    // 切换table页\n    handleCurrentChange: function () {\n      var _handleCurrentChange = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(val) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.currentPage = val;\n                this.loading = true;\n                _context5.next = 4;\n                return this.getAdminUsers('changePage');\n\n              case 4:\n                this.loading = false;\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function handleCurrentChange(_x2) {\n        return _handleCurrentChange.apply(this, arguments);\n      }\n\n      return handleCurrentChange;\n    }(),\n    handleDelete: function handleDelete(val) {\n      var _this = this;\n\n      var res;\n      this.$confirm('此操作将永久删除该用户, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _this.loading = true;\n                _context6.next = 4;\n                return Admin.deleteOneUser(val.row.id);\n\n              case 4:\n                res = _context6.sent;\n                _context6.next = 11;\n                break;\n\n              case 7:\n                _context6.prev = 7;\n                _context6.t0 = _context6[\"catch\"](0);\n                _this.loading = false;\n                console.log(_context6.t0);\n\n              case 11:\n                if (!(res.code < window.MAX_SUCCESS_CODE)) {\n                  _context6.next = 19;\n                  break;\n                }\n\n                _this.loading = false;\n\n                if (_this.total_nums % _this.pageCount === 1 && _this.currentPage !== 1) {\n                  // 判断删除的是不是每一页的最后一条数据\n                  _this.currentPage--;\n                }\n\n                _context6.next = 16;\n                return _this.getAdminUsers();\n\n              case 16:\n                _this.$message({\n                  type: 'success',\n                  message: \"\".concat(res.message)\n                });\n\n                _context6.next = 21;\n                break;\n\n              case 19:\n                _this.loading = false;\n\n                _this.$message.error(\"\".concat(res.message));\n\n              case 21:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[0, 7]]);\n      })));\n    },\n    // 提交表单信息\n    confirmEdit: function () {\n      var _confirmEdit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(this.activeTab === '修改信息')) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                _context7.next = 3;\n                return this.$refs.userInfo.submitForm('form');\n\n              case 3:\n                _context7.next = 7;\n                break;\n\n              case 5:\n                _context7.next = 7;\n                return this.$refs.password.submitForm('form');\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function confirmEdit() {\n        return _confirmEdit.apply(this, arguments);\n      }\n\n      return confirmEdit;\n    }(),\n    // 重置\n    resetForm: function resetForm() {\n      if (this.activeTab === '修改信息') {\n        this.$refs.userInfo.resetForm('form');\n      } else {\n        this.$refs.password.resetForm('form');\n      }\n    },\n    // 双击 table ro\n    rowClick: function rowClick(row) {\n      this.handleEdit(row);\n    },\n    // 弹框 右上角 X\n    handleClose: function handleClose(done) {\n      this.dialogFormVisible = false;\n      done();\n    },\n    // 切换tab栏\n    handleClick: function handleClick(tab) {\n      console.log(tab);\n      this.activeTab = tab.name;\n    },\n    // 监听子组件更新用户信息是否成功\n    handleInfoResult: function () {\n      var _handleInfoResult = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(flag) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this.dialogFormVisible = false;\n\n                if (flag === true) {\n                  this.getAdminUsers();\n                }\n\n              case 2:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function handleInfoResult(_x3) {\n        return _handleInfoResult.apply(this, arguments);\n      }\n\n      return handleInfoResult;\n    }(),\n    // 监听子组件更新密码是否成功\n    handlePasswordResult: function handlePasswordResult(result) {\n      if (result === true) {\n        this.dialogFormVisible = false;\n      }\n    },\n    // 监听添加用户是否成功\n    addUser: function () {\n      var _addUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(flag) {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(flag === true)) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                if (this.total_nums % this.pageCount === 0) {\n                  // 判断当前页的数据是不是满了，需要增加新的页码\n                  this.currentPage++;\n                }\n\n                _context9.next = 4;\n                return this.getAdminUsers();\n\n              case 4:\n                this.refreshPagination = false; // 刷新pagination组件\n\n                this.$nextTick(function () {\n                  _this2.refreshPagination = true;\n                });\n\n              case 6:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function addUser(_x4) {\n        return _addUser.apply(this, arguments);\n      }\n\n      return addUser;\n    }(),\n    shuffleList: function shuffleList(users) {\n      var list = [];\n      users.forEach(function (element) {\n        var groups = [];\n        element.groups.forEach(function (item) {\n          groups.push(item.name);\n        });\n        element.groupNames = groups.join(',');\n        list.push(element);\n      });\n      return list;\n    }\n  },\n  created: function () {\n    var _created = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee10() {\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this.getAdminUsers();\n\n            case 2:\n              this.getAllGroups();\n              this.tableColumn = [{\n                prop: 'username',\n                label: '名称'\n              }, {\n                prop: 'groupNames',\n                label: '所属分组'\n              }]; // 设置表头信息\n\n              this.operate = [{\n                name: '编辑',\n                func: 'handleEdit',\n                type: 'primary'\n              }, {\n                name: '删除',\n                func: 'handleDelete',\n                type: 'danger'\n              }];\n              this.eventBus.$on('addUser', this.addUser);\n\n            case 6:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  beforeDestroy: function beforeDestroy() {\n    this.eventBus.$off('addUser', this.addUser);\n  }\n};",null]}