{"remainingRequest":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/thread-loader/dist/cjs.js!/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/babel-loader/lib/index.js!/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/lyntest/lyntest-vue/src/component/common/node-tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/src/component/common/node-tree.vue","mtime":1607655351000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport NodeEdit from './node-edit';\nimport Node from '@/model/track/node';\nexport default {\n  name: 'node-tree',\n  components: {\n    NodeEdit: NodeEdit\n  },\n  data: function data() {\n    return {\n      result: {},\n      expandedNode: [],\n      filterText: '',\n      defaultProps: {\n        children: 'children',\n        label: 'name'\n      },\n      disabled: false,\n      list: [],\n      confirmDeleteDialog: false,\n      removeNodeIds: []\n    };\n  },\n  props: {\n    type: {\n      type: String,\n      default: 'view'\n    },\n    treeNodes: {\n      type: Array\n    },\n    selectNode: {\n      type: Object\n    },\n    draggable: {\n      type: Boolean,\n      default: true\n    },\n    currentProject: {\n      type: Object\n    }\n  },\n  watch: {\n    filterText: function filterText(val) {\n      this.$refs.tree.filter(val);\n    }\n  },\n  methods: {\n    handleDragEnd: function () {\n      var _handleDragEnd = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(draggingNode, dropNode, dropType) {\n        var param, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(dropType === 'none' || dropType === undefined)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                param = this.buildParam(draggingNode, dropNode, dropType);\n                this.list = [];\n                this.getNodeTree(this.treeNodes, draggingNode.data.id, this.list);\n                _context.next = 7;\n                return Node.dragNode(param);\n\n              case 7:\n                res = _context.sent;\n\n                if (!(res.code < window.MAX_SUCCESS_CODE)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                _context.next = 11;\n                return Node.nodePosition(this.list);\n\n              case 11:\n                this.$emit('refresh');\n                _context.next = 15;\n                break;\n\n              case 14:\n                this.$message.error('服务端异常');\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleDragEnd(_x, _x2, _x3) {\n        return _handleDragEnd.apply(this, arguments);\n      }\n\n      return handleDragEnd;\n    }(),\n    buildParam: function buildParam(draggingNode, dropNode, dropType) {\n      var _this = this;\n\n      var param;\n\n      if (dropNode.level === 1 && dropType !== 'inner') {\n        param = draggingNode.data;\n      } else {\n        this.treeNodes.some(function (node) {\n          param = _this.findTreeByNodeId(node, dropNode.data.id);\n          return param;\n        });\n      }\n\n      return param;\n    },\n    getNodeTree: function getNodeTree(nodes, id, list) {\n      if (!nodes) {\n        return;\n      }\n\n      for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i].id === id) {\n          list[0] = i - 1 >= 0 ? nodes[i - 1].id : 0;\n          list[1] = nodes[i].id;\n          list[2] = i + 1 < nodes.length ? nodes[i + 1].id : 0;\n          return;\n        }\n\n        if (nodes[i].children) {\n          this.getNodeTree(nodes[i].children, id, list);\n        }\n      }\n    },\n    refreshTable: function refreshTable() {\n      this.$emit('refreshTable');\n    },\n    findTreeByNodeId: function findTreeByNodeId(rootNode, nodeId) {\n      if (rootNode.id === nodeId) {\n        return rootNode;\n      }\n\n      if (rootNode.children) {\n        for (var i = 0; i < rootNode.children.length; i++) {\n          if (this.findTreeByNodeId(rootNode.children[i], nodeId)) {\n            return rootNode;\n          }\n        }\n      }\n    },\n    remove: function remove(node) {\n      var nodeIds = [];\n      this.getChildNodeId(node.data, nodeIds);\n      this.removeNodeIds = nodeIds;\n      this.confirmDeleteDialog = true;\n    },\n    confirmRemove: function () {\n      var _confirmRemove = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Node.deleteNodes(this.removeNodeIds);\n\n              case 2:\n                res = _context2.sent;\n\n                if (res.code < window.MAX_SUCCESS_CODE) {\n                  this.$message.success(res.message);\n                  this.$emit('refresh');\n                  this.confirmDeleteDialog = false;\n                } else {\n                  this.$message.error('服务端异常');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function confirmRemove() {\n        return _confirmRemove.apply(this, arguments);\n      }\n\n      return confirmRemove;\n    }(),\n    handleNodeSelect: function handleNodeSelect(node) {\n      var nodeIds = [];\n      var pNodes = [];\n      this.getChildNodeId(node.data, nodeIds);\n      this.getParentNodes(node, pNodes);\n      this.$emit('nodeSelectEvent', nodeIds, pNodes);\n      this.$emit('update:selectNode', node);\n    },\n    getChildNodeId: function getChildNodeId(rootNode, nodeIds) {\n      // 递归获取所有子节点ID\n      nodeIds.push(rootNode.id);\n\n      if (rootNode.children) {\n        for (var i = 0; i < rootNode.children.length; i++) {\n          this.getChildNodeId(rootNode.children[i], nodeIds);\n        }\n      }\n    },\n    getParentNodes: function getParentNodes(rootNode, pNodes) {\n      if (rootNode.parent && rootNode.parent.id !== 0) {\n        this.getParentNodes(rootNode.parent, pNodes);\n      }\n\n      if (rootNode.data.name && rootNode.data.name !== '') {\n        pNodes.push(rootNode.data);\n      }\n    },\n    filterNode: function filterNode(value, data) {\n      if (!value) return true;\n      return data.name.indexOf(value) !== -1;\n    },\n    openEditNodeDialog: function openEditNodeDialog(type, data) {\n      var nodeIds = [];\n\n      if (type === 'edit') {\n        this.getChildNodeId(data, nodeIds);\n      }\n\n      this.$refs.nodeEdit.open(type, data, nodeIds);\n    },\n    refreshNode: function refreshNode() {\n      this.$emit('refresh');\n    },\n    nodeExpand: function nodeExpand(data) {\n      if (data.id) {\n        this.expandedNode.push(data.id);\n      }\n    },\n    nodeCollapse: function nodeCollapse(data) {\n      if (data.id) {\n        this.expandedNode.splice(this.expandedNode.indexOf(data.id), 1);\n      }\n    }\n  }\n};",null]}