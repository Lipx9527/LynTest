{"remainingRequest":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/thread-loader/dist/cjs.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/view/admin/group/group-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/view/admin/group/group-list.vue","mtime":1606834545538},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Admin from '@/lin/model/admin';\nimport LinTable from '@/component/base/table/lin-table';\nexport default {\n  components: {\n    LinTable: LinTable\n  },\n  inject: ['eventBus'],\n  data: function data() {\n    return {\n      id: 0,\n      // 分组id\n      tableData: [],\n      // 表格数据\n      tableColumn: [],\n      // 表头数据\n      operate: [],\n      // 表格按键操作区\n      dialogFormVisible: false,\n      // 是否弹窗\n      labelPosition: 'right',\n      // 设置label位置\n      form: {\n        // 表单信息\n        name: '',\n        info: ''\n      },\n      cacheForm: {\n        // 缓存第一次的表单信息\n        name: '',\n        info: ''\n      },\n      loading: false,\n      activeTab: '修改信息',\n      // tab 标题\n      rules: {\n        // 表单验证规则\n        name: [{\n          required: true,\n          message: '请输入分组名称',\n          trigger: 'blur'\n        }],\n        info: []\n      }\n    };\n  },\n  methods: {\n    // 获取所有分组并传给table渲染\n    getAllGroups: function () {\n      var _getAllGroups = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                this.loading = true;\n                _context.next = 4;\n                return Admin.getAllGroups();\n\n              case 4:\n                this.tableData = _context.sent;\n                this.loading = false;\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                this.loading = false;\n                console.log(_context.t0);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n\n      function getAllGroups() {\n        return _getAllGroups.apply(this, arguments);\n      }\n\n      return getAllGroups;\n    }(),\n    confirmEdit: function () {\n      var _confirmEdit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.form.name === '')) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                this.$message.warning('请将信息填写完整');\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                if (!(this.cacheForm.name !== this.form.name || this.cacheForm.info !== this.form.info)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 6;\n                return Admin.updateOneGroup(this.form.name, this.form.info, this.id);\n\n              case 6:\n                res = _context2.sent;\n\n                if (res.code < window.MAX_SUCCESS_CODE) {\n                  this.$message.success(\"\".concat(res.message));\n                  this.getAllGroups();\n                }\n\n              case 8:\n                this.dialogFormVisible = false;\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function confirmEdit() {\n        return _confirmEdit.apply(this, arguments);\n      }\n\n      return confirmEdit;\n    }(),\n    resetForm: function resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    // 获取所拥有的权限并渲染  由子组件提供\n    handleEdit: function handleEdit(val) {\n      var selectedData; // 单击 编辑按键\n\n      if (val.index >= 0) {\n        selectedData = val.row;\n      } else {\n        // 单机 table row\n        selectedData = val;\n      }\n\n      this.id = selectedData.id;\n      this.form.name = selectedData.name;\n      this.form.info = selectedData.info;\n      this.cacheForm = _objectSpread({}, this.form);\n      this.dialogFormVisible = true;\n    },\n    goToGroupEditPage: function goToGroupEditPage(val) {\n      var selectedData; // 单击 编辑按键\n\n      if (val.index >= 0) {\n        selectedData = val.row;\n      } else {\n        // 单机 table row\n        selectedData = val;\n      }\n\n      this.id = selectedData.id;\n      this.$router.push({\n        path: '/admin/group/edit',\n        query: {\n          id: selectedData.id\n        }\n      });\n    },\n    handleDelete: function handleDelete(val) {\n      var _this = this;\n\n      var res;\n      this.$confirm('此操作将永久删除该分组, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _this.loading = true;\n                _context3.next = 4;\n                return Admin.deleteOneGroup(val.row.id);\n\n              case 4:\n                res = _context3.sent;\n                _context3.next = 11;\n                break;\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n                _this.loading = false;\n                console.log(_context3.t0);\n\n              case 11:\n                if (!(res.code < window.MAX_SUCCESS_CODE)) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                _context3.next = 14;\n                return _this.getAllGroups();\n\n              case 14:\n                _this.$message({\n                  type: 'success',\n                  message: \"\".concat(res.message)\n                });\n\n                _context3.next = 19;\n                break;\n\n              case 17:\n                _this.loading = false;\n\n                _this.$message({\n                  type: 'error',\n                  message: \"\".concat(res.message)\n                });\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 7]]);\n      })));\n    },\n    // 双击 table row\n    rowClick: function rowClick(row) {\n      this.handleEdit(row);\n    },\n    // 弹框 右上角 X\n    handleClose: function handleClose(done) {\n      done();\n    },\n    // 切换tab栏\n    handleClick: function handleClick(tab) {\n      this.activeTab = tab.name;\n    },\n    // 监听分添加组是否成功\n    addGroup: function () {\n      var _addGroup = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(flag) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(flag === true)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                _context4.next = 3;\n                return this.getAllGroups();\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function addGroup(_x) {\n        return _addGroup.apply(this, arguments);\n      }\n\n      return addGroup;\n    }()\n  },\n  created: function () {\n    var _created = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.getAllGroups();\n\n            case 2:\n              this.tableColumn = [{\n                prop: 'name',\n                label: '名称'\n              }, {\n                prop: 'info',\n                label: '信息'\n              }]; // 设置表头信息\n\n              this.operate = [{\n                name: '信息',\n                func: 'handleEdit',\n                type: 'primary'\n              }, {\n                name: '权限',\n                func: 'goToGroupEditPage',\n                type: 'success'\n              }, {\n                name: '删除',\n                func: 'handleDelete',\n                type: 'danger'\n              }]; // 监听添加分组是否成功\n\n              this.eventBus.$on('addGroup', this.addGroup);\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  beforeDestroy: function beforeDestroy() {\n    this.eventBus.$off('addUser', this.addGroup);\n  }\n};",null]}