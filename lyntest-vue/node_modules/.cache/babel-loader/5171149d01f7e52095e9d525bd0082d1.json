{"remainingRequest":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/thread-loader/dist/cjs.js!/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/babel-loader/lib/index.js!/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/eslint-loader/index.js??ref--13-0!/Users/lyn/Desktop/lyntest/lyntest-vue/src/lin/util/util.js","dependencies":[{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/src/lin/util/util.js","mtime":1606834545464},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/lyntest/lyntest-vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nimport { cloneDeep, throttle, debounce } from 'lodash';\n/* eslint-disable */\n\nvar Utils = {};\n/** 参数说明：\n * 根据长度截取先使用字符串，超长部分追加…\n * str 对象字符串\n * len 目标字节长度\n * 返回值： 处理结果字符串\n */\n\nUtils.cutString = function (str, len) {\n  if (str.length * 2 <= len) {\n    return str;\n  }\n\n  var strlen = 0;\n  var s = '';\n\n  for (var i = 0; i < str.length; i++) {\n    // eslint-disable-line\n    s += str.charAt(i);\n\n    if (str.charCodeAt(i) > 128) {\n      strlen += 2;\n\n      if (strlen >= len) {\n        return \"\".concat(s.substring(0, s.length - 1), \"...\");\n      }\n    } else {\n      strlen += 1;\n\n      if (strlen >= len) {\n        return \"\".concat(s.substring(0, s.length - 2), \"...\");\n      }\n    }\n  }\n\n  return s;\n};\n/**\n * 简单数组的交集\n * @param {Array} a\n * @param {Array} b\n */\n\n\nUtils.getIntersect = function (a, b) {\n  if (a.constructor === Array && b.constructor === Array) {\n    var set1 = new Set(a);\n    var set2 = new Set(b);\n    return Array.from(new Set(_toConsumableArray(set1).filter(function (x) {\n      return set2.has(x);\n    })));\n  }\n\n  return null;\n};\n/**\n * 防抖函数\n * @param {*} func 函数体\n * @param {*} wait 延时\n */\n\n\nUtils.debounce = function (func) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  return debounce(func, wait);\n};\n/**\n * 节流函数\n * @param {*} func 函数体\n * @param {*} wait 延时\n */\n\n\nUtils.throttle = function (func) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  return throttle(func, wait);\n};\n/**\n * 返回 n 位的随机字符串\n * @param {Number} n\n */\n\n\nUtils.getRandomStr = function () {\n  var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n  var str = '';\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890';\n\n  for (var i = 0; i < n; i += 1) {\n    str += chars.charAt(Math.floor(Math.random() * 62));\n  }\n\n  return str;\n};\n\nfunction getTypeOf(obj) {\n  var toString = Object.prototype.toString;\n  var map = {\n    '[object Boolean]': 'boolean',\n    '[object Number]': 'number',\n    '[object String]': 'string',\n    '[object Function]': 'function',\n    '[object Array]': 'array',\n    '[object Date]': 'date',\n    '[object RegExp]': 'regExp',\n    '[object Undefined]': 'undefined',\n    '[object Null]': 'null',\n    '[object Object]': 'object',\n    '[object Symbol]': 'symbol'\n  };\n  return map[toString.call(obj)];\n}\n\nfunction insertItem(item, arr) {\n  var order = item.order;\n\n  if (typeof arr[order] !== 'number') {\n    arr[order] = item;\n    return;\n  }\n\n  var moveBegin;\n  var moveEnd;\n  var pos;\n  var i = order + 1;\n\n  while (arr[i]) {\n    if (arr[i].order > order) {\n      if (!moveBegin) {\n        moveBegin = i;\n        pos = i;\n      }\n    }\n\n    i += 1;\n  }\n\n  if (moveBegin) {\n    moveEnd = i;\n  } else {\n    pos = i;\n  }\n\n  if (!moveEnd) {\n    arr[pos] = item;\n    return;\n  } // 需要移动\n\n\n  for (var _i = moveEnd; _i >= moveBegin; _i -= 1) {\n    arr[_i + 1] = arr[_i];\n  }\n\n  arr[pos] = item;\n}\n/**\n * 根据数组的 order 字段排序\n * @param {Array} source\n */\n\n\nUtils.sortByOrder = function () {\n  var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  if (!Array.isArray(source)) {\n    console.error('sortByOrder 传入参数不符合要求, 应为数组', source);\n    return source;\n  }\n\n  var tmp = [];\n  var target = []; // 将带排序的子项添加进临时数组 tmp\n\n  for (var i = 0; i < source.length; i += 1) {\n    if (typeof source[i].order !== 'number') {\n      continue;\n    }\n\n    var order = source[i].order; // 支持设置倒数顺序\n\n    if (order < 0) {\n      order = source.length + order;\n\n      if (order < 0) {\n        order = 0;\n      }\n    } // 确保整数\n\n\n    source[i].order = Math.floor(order); // 插入临时数组\n\n    insertItem(source[i], tmp);\n  } // 合并临时数组和原数组\n\n\n  for (var _i2 = 0, j = 0; _i2 < source.length; _i2 += 1) {\n    if (typeof source[_i2].order === 'number') {\n      continue;\n    } // 找需要填的坑\n\n\n    while (tmp[j]) {\n      j += 1;\n    }\n\n    tmp[j] = source[_i2];\n  } // 筛除空隙\n\n\n  target = tmp.filter(function (item) {\n    return !!item;\n  });\n  return target;\n};\n/**\n * 深度遍历，深拷贝\n * @param {*} data\n */\n\n\nUtils.deepClone = function (data) {\n  return cloneDeep(data);\n};\n/**\n * 中划线转驼峰\n */\n\n\nUtils.came = function (str) {\n  return \"\".concat(str).replace(/-\\D/g, function (match) {\n    return match.charAt(1).toUpperCase();\n  });\n};\n/**\n * 判断权限\n */\n\n\nUtils.hasPermission = function (permissions, route, user) {\n  // eslint-disable-line\n  if (user && user.admin) {\n    return true;\n  }\n\n  if (route.permission) {\n    return permissions.some(function (permission) {\n      return route.permission.indexOf(permission) > -1;\n    });\n  }\n\n  return true;\n};\n\nvar cached;\n/**\n * 获取窗口滚动条大小, From: https://github.com/react-component/util/blob/master/src/getScrollBarSize.js\n * @param {boolean} fresh 强制重新计算\n * @returns {number}\n */\n\nexport function getScrollBarSize(fresh) {\n  if (fresh || cached === undefined) {\n    var inner = document.createElement('div');\n    inner.style.width = '100%';\n    inner.style.height = '200px';\n    var outer = document.createElement('div');\n    var outerStyle = outer.style;\n    outerStyle.position = 'absolute';\n    outerStyle.top = 0;\n    outerStyle.left = 0;\n    outerStyle.pointerEvents = 'none';\n    outerStyle.visibility = 'hidden';\n    outerStyle.width = '200px';\n    outerStyle.height = '150px';\n    outerStyle.overflow = 'hidden';\n    outer.appendChild(inner);\n    document.body.appendChild(outer);\n    var widthContained = inner.offsetWidth;\n    outer.style.overflow = 'scroll';\n    var widthScroll = inner.offsetWidth;\n\n    if (widthContained === widthScroll) {\n      widthScroll = outer.clientWidth;\n    }\n\n    document.body.removeChild(outer);\n    cached = widthContained - widthScroll;\n  }\n\n  return cached;\n}\nexport default Utils;",null]}