{"remainingRequest":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/view/sql/sql-case.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/view/sql/sql-case.vue","mtime":1606834545572},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport DataBase from '@/model/sql/database';\nimport Sql from '@/model/sql/sql';\nimport Ubt from '@/model/dpf/ubt';\nexport default {\n  data: function data() {\n    return {\n      search: {\n        database_type: 1,\n        database_id: null,\n        page: 0,\n        count: 10\n      },\n      total: 0,\n      database_type_list: [{\n        label: 'MySQL',\n        value: 1\n      }, {\n        label: 'Oracle',\n        value: 2\n      }],\n      database_list: [],\n      sql_list: [],\n      sql_info: {},\n      default_sql_info: {\n        database_id: null,\n        sql_name: '',\n        sql_value: ''\n      },\n      edit_type: null,\n      case_dialog_visible: false,\n      result_dialog_visible: false,\n      execute_result: [],\n      table_column: []\n    };\n  },\n  mounted: function mounted() {\n    this.searchDataBaseList();\n    this.searchSqlList();\n  },\n  methods: {\n    searchDataBaseList: function () {\n      var _searchDataBaseList = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return DataBase.searchDBList(this.search.database_type);\n\n              case 2:\n                res = _context.sent;\n                this.database_list = res;\n                this.sql_info.database_type = this.search.database_type;\n                _context.next = 7;\n                return this.searchSqlList();\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function searchDataBaseList() {\n        return _searchDataBaseList.apply(this, arguments);\n      }\n\n      return searchDataBaseList;\n    }(),\n    searchSqlList: function () {\n      var _searchSqlList = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Sql.getSqlCasePage(this.search);\n\n              case 2:\n                res = _context2.sent;\n                res.items.forEach(function (e) {\n                  e.db_type = e.database_type === 1 ? 'MySQL' : 'Oracle';\n                });\n                this.sql_list = res.items;\n                this.total = res.total;\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function searchSqlList() {\n        return _searchSqlList.apply(this, arguments);\n      }\n\n      return searchSqlList;\n    }(),\n    handleSizeChange: function handleSizeChange(val) {\n      this.search.count = val;\n      this.searchSqlList();\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.search.page = val;\n      this.searchSqlList();\n    },\n    createSqlCase: function createSqlCase() {\n      this.sql_info = _objectSpread({}, this.default_sql_info);\n      this.sql_info.database_type = this.search.database_type;\n      this.edit_type = 1;\n      this.case_dialog_visible = true;\n    },\n    saveSqlCase: function () {\n      var _saveSqlCase = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.edit_type === 1)) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                _context3.next = 3;\n                return Sql.createSqlCase(this.sql_info);\n\n              case 3:\n                _context3.t0 = _context3.sent;\n                _context3.next = 9;\n                break;\n\n              case 6:\n                _context3.next = 8;\n                return Sql.updateSqlCase(this.sql_info);\n\n              case 8:\n                _context3.t0 = _context3.sent;\n\n              case 9:\n                res = _context3.t0;\n\n                if (res.code < window.MAX_SUCCESS_CODE) {\n                  this.$message.success(\"\".concat(res.message));\n                  this.case_dialog_visible = false;\n                  this.searchSqlList();\n                } else {\n                  this.$message.error('服务端异常');\n                }\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function saveSqlCase() {\n        return _saveSqlCase.apply(this, arguments);\n      }\n\n      return saveSqlCase;\n    }(),\n    sqlExecute: function () {\n      var _sqlExecute = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(row) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return Sql.executeSql(row);\n\n              case 2:\n                res = _context4.sent;\n                this.result_dialog_visible = res.success;\n\n                if (res.success) {\n                  this.execute_result = res.result;\n                  this.table_column = Object.keys(res.result[0]);\n                } else {\n                  this.$message.error(res.msg);\n                }\n\n                _context4.next = 7;\n                return Ubt.insertUbt('sql-execute', 1);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function sqlExecute(_x) {\n        return _sqlExecute.apply(this, arguments);\n      }\n\n      return sqlExecute;\n    }(),\n    handleEdit: function handleEdit(row) {\n      this.edit_type = 2;\n      this.case_dialog_visible = true;\n      this.sql_info = _objectSpread({}, row);\n    },\n    deleteSql: function () {\n      var _deleteSql = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(id) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return Sql.deleteSql(id);\n\n              case 2:\n                res = _context5.sent;\n\n                if (res.code < window.MAX_SUCCESS_CODE) {\n                  this.$message.success(\"\".concat(res.message));\n                  this.searchSqlList();\n                } else {\n                  this.$message.error('删除功能异常');\n                }\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function deleteSql(_x2) {\n        return _deleteSql.apply(this, arguments);\n      }\n\n      return deleteSql;\n    }()\n  }\n};",{"version":3,"sources":["sql-case.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA,OAAA,QAAA,MAAA,sBAAA;AACA,OAAA,GAAA,MAAA,iBAAA;AACA,OAAA,GAAA,MAAA,iBAAA;AAEA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,MAAA,EAAA;AACA,QAAA,aAAA,EAAA,CADA;AAEA,QAAA,WAAA,EAAA,IAFA;AAGA,QAAA,IAAA,EAAA,CAHA;AAIA,QAAA,KAAA,EAAA;AAJA,OADA;AAOA,MAAA,KAAA,EAAA,CAPA;AAQA,MAAA,kBAAA,EAAA,CAAA;AACA,QAAA,KAAA,EAAA,OADA;AAEA,QAAA,KAAA,EAAA;AAFA,OAAA,EAGA;AACA,QAAA,KAAA,EAAA,QADA;AAEA,QAAA,KAAA,EAAA;AAFA,OAHA,CARA;AAeA,MAAA,aAAA,EAAA,EAfA;AAgBA,MAAA,QAAA,EAAA,EAhBA;AAiBA,MAAA,QAAA,EAAA,EAjBA;AAkBA,MAAA,gBAAA,EAAA;AACA,QAAA,WAAA,EAAA,IADA;AAEA,QAAA,QAAA,EAAA,EAFA;AAGA,QAAA,SAAA,EAAA;AAHA,OAlBA;AAuBA,MAAA,SAAA,EAAA,IAvBA;AAwBA,MAAA,mBAAA,EAAA,KAxBA;AAyBA,MAAA,qBAAA,EAAA,KAzBA;AA0BA,MAAA,cAAA,EAAA,EA1BA;AA2BA,MAAA,YAAA,EAAA;AA3BA,KAAA;AA6BA,GA/BA;AAgCA,EAAA,OAhCA,qBAgCA;AACA,SAAA,kBAAA;AACA,SAAA,aAAA;AACA,GAnCA;AAoCA,EAAA,OAAA,EAAA;AACA,IAAA,kBADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEA,QAAA,CAAA,YAAA,CAAA,KAAA,MAAA,CAAA,aAAA,CAFA;;AAAA;AAEA,gBAAA,GAFA;AAGA,qBAAA,aAAA,GAAA,GAAA;AACA,qBAAA,QAAA,CAAA,aAAA,GAAA,KAAA,MAAA,CAAA,aAAA;AAJA;AAAA,uBAKA,KAAA,aAAA,EALA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAOA,IAAA,aAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAQA,GAAA,CAAA,cAAA,CAAA,KAAA,MAAA,CARA;;AAAA;AAQA,gBAAA,GARA;AASA,gBAAA,GAAA,CAAA,KAAA,CAAA,OAAA,CAAA,UAAA,CAAA,EAAA;AACA,kBAAA,CAAA,CAAA,OAAA,GAAA,CAAA,CAAA,aAAA,KAAA,CAAA,GAAA,OAAA,GAAA,QAAA;AACA,iBAFA;AAGA,qBAAA,QAAA,GAAA,GAAA,CAAA,KAAA;AACA,qBAAA,KAAA,GAAA,GAAA,CAAA,KAAA;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAeA,IAAA,gBAfA,4BAeA,GAfA,EAeA;AACA,WAAA,MAAA,CAAA,KAAA,GAAA,GAAA;AACA,WAAA,aAAA;AACA,KAlBA;AAmBA,IAAA,mBAnBA,+BAmBA,GAnBA,EAmBA;AACA,WAAA,MAAA,CAAA,IAAA,GAAA,GAAA;AACA,WAAA,aAAA;AACA,KAtBA;AAuBA,IAAA,aAvBA,2BAuBA;AACA,WAAA,QAAA,qBAAA,KAAA,gBAAA;AACA,WAAA,QAAA,CAAA,aAAA,GAAA,KAAA,MAAA,CAAA,aAAA;AACA,WAAA,SAAA,GAAA,CAAA;AACA,WAAA,mBAAA,GAAA,IAAA;AACA,KA5BA;AA6BA,IAAA,WA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA8BA,KAAA,SAAA,KAAA,CA9BA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA8BA,GAAA,CAAA,aAAA,CAAA,KAAA,QAAA,CA9BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBA8BA,GAAA,CAAA,aAAA,CAAA,KAAA,QAAA,CA9BA;;AAAA;AAAA;;AAAA;AA8BA,gBAAA,GA9BA;;AA+BA,oBAAA,GAAA,CAAA,IAAA,GAAA,MAAA,CAAA,gBAAA,EAAA;AACA,uBAAA,QAAA,CAAA,OAAA,WAAA,GAAA,CAAA,OAAA;AACA,uBAAA,mBAAA,GAAA,KAAA;AACA,uBAAA,aAAA;AACA,iBAJA,MAIA;AACA,uBAAA,QAAA,CAAA,KAAA,CAAA,OAAA;AACA;;AArCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuCA,IAAA,UAvCA;AAAA;AAAA;AAAA,iDAuCA,GAvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAwCA,GAAA,CAAA,UAAA,CAAA,GAAA,CAxCA;;AAAA;AAwCA,gBAAA,GAxCA;AAyCA,qBAAA,qBAAA,GAAA,GAAA,CAAA,OAAA;;AACA,oBAAA,GAAA,CAAA,OAAA,EAAA;AACA,uBAAA,cAAA,GAAA,GAAA,CAAA,MAAA;AACA,uBAAA,YAAA,GAAA,MAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AACA,iBAHA,MAGA;AACA,uBAAA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA;AACA;;AA/CA;AAAA,uBAiDA,GAAA,CAAA,SAAA,CAAA,aAAA,EAAA,CAAA,CAjDA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmDA,IAAA,UAnDA,sBAmDA,GAnDA,EAmDA;AACA,WAAA,SAAA,GAAA,CAAA;AACA,WAAA,mBAAA,GAAA,IAAA;AACA,WAAA,QAAA,qBAAA,GAAA;AACA,KAvDA;AAwDA,IAAA,SAxDA;AAAA;AAAA;AAAA,iDAwDA,EAxDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAyDA,GAAA,CAAA,SAAA,CAAA,EAAA,CAzDA;;AAAA;AAyDA,gBAAA,GAzDA;;AA0DA,oBAAA,GAAA,CAAA,IAAA,GAAA,MAAA,CAAA,gBAAA,EAAA;AACA,uBAAA,QAAA,CAAA,OAAA,WAAA,GAAA,CAAA,OAAA;AACA,uBAAA,aAAA;AACA,iBAHA,MAGA;AACA,uBAAA,QAAA,CAAA,KAAA,CAAA,QAAA;AACA;;AA/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AApCA,CAAA","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"header\"><div class=\"title\">SQL脚本</div></div>\n    <div class=\"search-row\">\n      <div>\n        <el-select v-model=\"search.database_type\" style=\"width: 100px\" @change=\"searchDataBaseList\">\n          <el-option v-for=\"item in database_type_list\" :key=\"item.value\" :value =\"item.value\" :label =\"item.label\"></el-option>\n        </el-select>\n        <el-select v-model=\"search.database_id\" placeholder=\"数据库筛选\" style=\"width: 150px;margin-left: 10px\" filterable clearable @change=\"searchSqlList\">\n          <el-option v-for=\"item in database_list\" :key=\"item.id\" :value =\"item.id\" :label =\"item.database_name\"></el-option>\n        </el-select>\n      </div>\n      <div class=\"page\">\n        <el-pagination background\n                       @size-change=\"handleSizeChange\"\n                       @current-change=\"handleCurrentChange\"\n                       :current-page=\"search.page\"\n                       :page-size=\"search.count\"\n                       :page-sizes=\"[10, 20, 50, 100]\"\n                       :total=\"total\" layout=\"sizes, prev, pager, next\">\n        </el-pagination>\n        <el-button type=\"primary\" @click=\"createSqlCase\">新 增</el-button>\n      </div>\n    </div>\n    <el-table :data=\"sql_list\" style=\"margin-top: 10px\" max-height=\"500\">\n      <el-table-column prop=\"sql_name\" label=\"Case名称\" align=\"center\" width=\"300\"></el-table-column>\n      <el-table-column prop=\"database_name\" label=\"数据库名称\" align=\"center\" width=\"140\"></el-table-column>\n      <el-table-column prop=\"db_type\" label=\"类型\" align=\"center\" sortable width=\"200\">\n        <template slot-scope=\"scope\">\n          <el-tag type=\"success\" style=\"margin:auto\" disable-transitions>{{scope.row.db_type}}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"操作\" width=\"200\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-button size=\"mini\"\n                     style=\"margin:auto\"\n                     type=\"success\"\n                     plain\n                     @click=\"sqlExecute(scope.row)\">执行</el-button>\n          <el-button size=\"mini\"\n                     style=\"margin:auto\"\n                     type=\"primary\"\n                     plain\n                     @click=\"handleEdit(scope.row)\">编辑</el-button>\n          <el-button size=\"mini\"\n                     style=\"margin:auto\"\n                     type=\"danger\"\n                     plain\n                     @click=\"deleteSql(scope.row.id)\">删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <el-dialog :visible.sync=\"case_dialog_visible\">\n      <el-form :model=\"sql_info\" label-width=\"80px\">\n        <el-form-item label=\"类 型\">\n          <el-select v-model=\"sql_info.database_type\" style=\"width: 500px\" disabled >\n            <el-option v-for=\"item in database_type_list\" :key=\"item.value\" :value =\"item.value\" :label =\"item.label\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"数据库\">\n          <el-select v-model=\"sql_info.database_id\" style=\"width: 500px\">\n            <el-option v-for=\"item in database_list\" :key=\"item.id\" :value =\"item.id\" :label =\"item.database_name\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"SQL名称\">\n          <el-input\n            placeholder=\"请输入SQL名称\"\n            v-model=\"sql_info.sql_name\"\n            style=\"width: 500px\">\n          </el-input>\n        </el-form-item>\n        <el-form-item label=\"SQL\">\n          <el-input\n            type=\"textarea\"\n            :autosize=\"{ minRows: 5, maxRows: 10}\"\n            placeholder=\"请输入sql语句\"\n            v-model=\"sql_info.sql_value\"\n            style=\"width: 500px\">\n          </el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"case_dialog_visible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"saveSqlCase\">保 存</el-button>\n      </div>\n    </el-dialog>\n    <el-dialog :visible.sync=\"result_dialog_visible\">\n      <el-table :data=\"execute_result\">\n        <el-table-column v-for=\"item in table_column\" :prop=\"item\" :label=\"item\" :key=\"item\" width=\"300\"></el-table-column>\n      </el-table>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport DataBase from '@/model/sql/database'\nimport Sql from '@/model/sql/sql'\nimport Ubt from '@/model/dpf/ubt'\n\nexport default {\n  data() {\n    return {\n      search: {\n        database_type: 1,\n        database_id: null,\n        page: 0,\n        count: 10,\n      },\n      total: 0,\n      database_type_list: [{\n        label: 'MySQL',\n        value: 1,\n      }, {\n        label: 'Oracle',\n        value: 2,\n      }],\n      database_list: [],\n      sql_list: [],\n      sql_info: {},\n      default_sql_info: {\n        database_id: null,\n        sql_name: '',\n        sql_value: '',\n      },\n      edit_type: null,\n      case_dialog_visible: false,\n      result_dialog_visible: false,\n      execute_result: [],\n      table_column: [],\n    }\n  },\n  mounted() {\n    this.searchDataBaseList()\n    this.searchSqlList()\n  },\n  methods: {\n    async searchDataBaseList() {\n      const res = await DataBase.searchDBList(this.search.database_type)\n      this.database_list = res\n      this.sql_info.database_type = this.search.database_type\n      await this.searchSqlList()\n    },\n    async searchSqlList() {\n      const res = await Sql.getSqlCasePage(this.search)\n      res.items.forEach(e => {\n        e.db_type = e.database_type === 1 ? 'MySQL' : 'Oracle'\n      })\n      this.sql_list = res.items\n      this.total = res.total\n    },\n    handleSizeChange(val) {\n      this.search.count = val\n      this.searchSqlList()\n    },\n    handleCurrentChange(val) {\n      this.search.page = val\n      this.searchSqlList()\n    },\n    createSqlCase() {\n      this.sql_info = { ...this.default_sql_info }\n      this.sql_info.database_type = this.search.database_type\n      this.edit_type = 1\n      this.case_dialog_visible = true\n    },\n    async saveSqlCase() {\n      const res = this.edit_type === 1 ? await Sql.createSqlCase(this.sql_info) : await Sql.updateSqlCase(this.sql_info)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(`${res.message}`)\n        this.case_dialog_visible = false\n        this.searchSqlList()\n      } else {\n        this.$message.error('服务端异常')\n      }\n    },\n    async sqlExecute(row) {\n      const res = await Sql.executeSql(row)\n      this.result_dialog_visible = res.success\n      if (res.success) {\n        this.execute_result = res.result\n        this.table_column = Object.keys(res.result[0])\n      } else {\n        this.$message.error(res.msg)\n      }\n\n      await Ubt.insertUbt('sql-execute', 1)\n    },\n    handleEdit(row) {\n      this.edit_type = 2\n      this.case_dialog_visible = true\n      this.sql_info = { ...row }\n    },\n    async deleteSql(id) {\n      const res = await Sql.deleteSql(id)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(`${res.message}`)\n        this.searchSqlList()\n      } else {\n        this.$message.error('删除功能异常')\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n//noinspection CssUnknownTarget\n@import \"@/static/css/common.scss\";\n\n  .search-row {\n    display: flex;\n    justify-content: space-between;\n\n    .page {\n      display: flex;\n    }\n  }\n</style>\n"],"sourceRoot":"src/view/sql"}]}