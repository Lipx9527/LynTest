{"remainingRequest":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/thread-loader/dist/cjs.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/component/base/table/lin-table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/component/base/table/lin-table.vue","mtime":1606834545511},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import Sortable from 'sortablejs'\n// import FileSaver from 'file-saver'\nexport default {\n  props: {\n    tableColumn: {\n      // 表头名称\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    tableData: {\n      // 表格数据\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    operate: {\n      // 自定义按键及绑定方法\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    customColumn: {\n      // 定制要展示的列\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    fixedLeftList: {\n      // 左侧固定列\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    fixedRightList: {\n      // 右侧固定列\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    type: {\n      // 是否开启表格多选\n      type: String,\n      default: null\n    },\n    index: {\n      // 是否显示索引\n      index: String,\n      default: ''\n    },\n    highlightCurrentRow: {\n      // 是否开启表格单选\n      type: Boolean,\n      default: false\n    },\n    loading: {\n      // 动画加载\n      type: Boolean,\n      default: false\n    },\n    loadingText: {\n      // 动画提示\n      type: String,\n      default: ''\n    },\n    loadingIcon: {\n      // 动画图标\n      type: String,\n      default: 'el-icon-loading'\n    },\n    loadingBG: {\n      // 动画背景色\n      type: String,\n      default: 'rgba(255,255,255,0.5)'\n    },\n    pagination: {\n      // 分页\n      type: [Object, Boolean],\n      default: false\n    },\n    border: {\n      // 边框\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      filterTableColumn: [],\n      // 定制展示的列\n      currentPage: 1,\n      // 当前选中页\n      currentData: [],\n      // 每次切换页码的时候要给table传入不同的数据\n      selectedTableData: [],\n      // 多选选中的数据\n      currentRow: null,\n      // 单选选中的数据\n      oldVal: [],\n      // 上一次选中的数据\n      oldKey: [],\n      // 上一次选中数据的key\n      currentIndex: 1,\n      // 当前索引，切换页面的时候需要重新计算\n      rowClassName: '' // 行样式\n\n    };\n  },\n  created: function created() {},\n  beforeMount: function beforeMount() {\n    // 先放在session里，因为每次切换页码table都会重新渲染，之前选中都数据就丢失了  sessionstorage在create里面打包会提示undefined\n    sessionStorage.setItem('selectedTableData', JSON.stringify([]));\n  },\n  methods: {\n    // 开发者自定义的函数\n    buttonMethods: function buttonMethods(func, index, row) {\n      var _this = this;\n\n      var methods = this.$options.methods;\n      methods[func](_this, index, row);\n    },\n    // 行内编辑\n    handleEdit: function handleEdit(_this, index, row) {\n      _this.$emit('handleEdit', {\n        index: index,\n        row: row\n      });\n    },\n    // 行内删除\n    handleDelete: function handleDelete(_this, index, row) {\n      _this.$emit('handleDelete', {\n        index: index,\n        row: row\n      });\n    },\n    // 行内跳转页面\n    goToGroupEditPage: function goToGroupEditPage(_this, index, row) {\n      _this.$emit('goToGroupEditPage', {\n        index: index,\n        row: row\n      });\n    },\n    // 多选-选中checkbox\n    toggleSelection: function toggleSelection(rows, flag) {\n      var _this2 = this;\n\n      if (rows) {\n        rows.forEach(function (row) {\n          _this2.$refs.linTable.toggleRowSelection(row, flag);\n        });\n      } else {\n        this.$refs.linTable.clearSelection();\n      }\n    },\n    // 全选-取消全选\n    selectAll: function selectAll(val) {\n      this.oldKey = val.map(function (item) {\n        return item.key;\n      });\n    },\n    // 单选\n    handleCurrentChange: function handleCurrentChange(val, oldVal) {\n      this.currentRow = val;\n      this.$emit('handleCurrentChange', {\n        val: val,\n        oldVal: oldVal\n      });\n    },\n    // 单击某一行\n    rowClick: function rowClick(row) {\n      // eslint-disable-line\n      // 选中-多选\n      if (!this.oldKey.includes(row.key)) {\n        this.oldKey.push(row.key);\n        var data = this.oldVal.concat(row);\n        this.handleSelectionChange(data); // 选中checkbox\n\n        this.toggleSelection(this.currentData.filter(function (item) {\n          return item.key === row.key;\n        })); // 取消选中\n      } else {\n        this.oldKey = this.oldKey.filter(function (item) {\n          return item !== row.key;\n        });\n\n        var _data = this.oldVal.filter(function (item) {\n          return item.key !== row.key;\n        });\n\n        this.handleSelectionChange(_data);\n        this.toggleSelection(this.currentData.filter(function (item) {\n          return item.key === row.key;\n        }), false);\n      } // 选中-单选\n\n\n      if (this.currentOldRow && this.currentOldRow.key === row.key) {\n        // 取消单选选中\n        this.$refs.linTable.setCurrentRow();\n        this.currentOldRow = null;\n        return;\n      }\n\n      this.currentOldRow = row;\n    },\n    // 切换当前页\n    currentChange: function currentChange(page) {\n      var _this3 = this;\n\n      var currentSelectedData = [];\n      this.oldVal = [];\n      this.currentPage = page;\n      this.selectedTableData = JSON.parse(sessionStorage.getItem('selectedTableData'));\n      this.currentData = this.tableData.filter(function (item, index) {\n        return index >= _this3.currentPage * _this3.pagination.pageSize && index < _this3.currentPage * _this3.pagination.pageSize;\n      }); // eslint-disable-line\n\n      this.$emit('currentChange', page); // 已选中的数据打勾\n\n      this.selectedTableData.forEach(function (item) {\n        for (var i = 0; i < _this3.currentData.length; i++) {\n          if (_this3.currentData[i].key === item.key) {\n            // 切换页码重新计算oldVal\n            _this3.oldVal.push(_this3.currentData[i]); // 需要打勾的数据\n\n\n            currentSelectedData.push(_this3.currentData[i]);\n          }\n        }\n      });\n      this.$nextTick(function () {\n        _this3.toggleSelection(currentSelectedData);\n      }); // 切换行索引\n\n      this.currentIndex = this.currentPage * this.pagination.pageSize + 1;\n    },\n    // checkbox触发函数\n    handleSelectionChange: function handleSelectionChange(val) {\n      var valKeys = val.map(function (item) {\n        return item.key;\n      });\n      var oldValKeys = this.oldVal.map(function (item) {\n        return item.key;\n      });\n      this.selectedTableData = JSON.parse(sessionStorage.getItem('selectedTableData')); // 一条数据都没选中\n\n      if (this.selectedTableData.length === 0) {\n        this.selectedTableData = this.selectedTableData.concat(val);\n        this.$emit('selection-change', this.selectedTableData);\n        this.oldVal = _toConsumableArray(val);\n        sessionStorage.setItem('selectedTableData', JSON.stringify(this.selectedTableData));\n        return;\n      } // 判断是选中数据还是取消选中\n\n\n      if (valKeys.length < oldValKeys.length) {\n        var delKey = oldValKeys.filter(function (item) {\n          return !valKeys.includes(item);\n        });\n        this.selectedTableData = this.selectedTableData.filter(function (item) {\n          return !delKey.includes(item.key);\n        });\n        this.$emit('selection-change', this.selectedTableData);\n      } else {\n        var addKey = valKeys.filter(function (item) {\n          return !oldValKeys.includes(item);\n        });\n        var addVal = val.filter(function (item) {\n          return addKey.includes(item.key);\n        });\n        this.selectedTableData = this.selectedTableData.concat(addVal);\n        this.$emit('selection-change', this.selectedTableData);\n      }\n\n      sessionStorage.setItem('selectedTableData', JSON.stringify(this.selectedTableData));\n      this.oldVal = _toConsumableArray(val);\n    }\n  },\n  watch: {\n    fixedLeftList: {\n      handler: function handler() {\n        var _this4 = this;\n\n        // eslint-disable-line\n        this.filterTableColumn.map(function (item, index) {\n          if (_this4.fixedLeftList.indexOf(item.label) > -1) {\n            _this4.$set(_this4.filterTableColumn[index], 'fixed', 'left');\n          } else if (_this4.fixedRightList.indexOf(item.label) === -1) {\n            _this4.$set(_this4.filterTableColumn[index], 'fixed', false);\n          }\n\n          return '';\n        });\n      },\n      deep: true,\n      immediate: true\n    },\n    fixedRightList: {\n      handler: function handler() {\n        var _this5 = this;\n\n        // eslint-disable-line\n        this.filterTableColumn.map(function (item, index) {\n          if (_this5.fixedRightList.indexOf(item.label) > -1) {\n            _this5.$set(_this5.filterTableColumn[index], 'fixed', 'right');\n          } else if (_this5.fixedLeftList.indexOf(item.label) === -1) {\n            _this5.$set(_this5.filterTableColumn[index], 'fixed', false);\n          }\n\n          return '';\n        });\n      },\n      deep: true,\n      immediate: true\n    },\n    customColumn: {\n      handler: function handler(val) {\n        if (val.length > 1) {\n          this.filterTableColumn = this.tableColumn.filter(function (v) {\n            return val.indexOf(v.label) > -1;\n          });\n        }\n      },\n      deep: true\n    },\n    tableData: {\n      handler: function handler() {\n        var _this6 = this;\n\n        // 传了分页配置\n        if (this.pagination && this.pagination.pageSize) {\n          this.currentData = this.tableData.filter(function (item, index) {\n            return index < _this6.pagination.pageSize;\n          });\n        } else {\n          this.currentData = this.tableData;\n        }\n      },\n      deep: true,\n      immediate: true\n    },\n    tableColumn: {\n      handler: function handler() {\n        var _this7 = this;\n\n        // 如果一开始没有传要展示的列 就默认全展示\n        if (this.customColumn.length > 1) {\n          this.filterTableColumn = this.tableColumn.filter(function (v) {\n            return _this7.customColumn.indexOf(v.label) > -1;\n          });\n        } else {\n          this.filterTableColumn = this.tableColumn;\n        }\n      },\n      deep: true,\n      immediate: true\n    }\n  }\n};",null]}