{"remainingRequest":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/thread-loader/dist/cjs.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/component/layout/reuse-tab.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/component/layout/reuse-tab.vue","mtime":1607760303436},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport { swiper, swiperSlide } from 'vue-awesome-swiper';\nimport 'swiper/dist/css/swiper.css'; // eslint-disable-line\n\nexport default {\n  components: {\n    swiper: swiper,\n    swiperSlide: swiperSlide\n  },\n  data: function data() {\n    return {\n      histories: [],\n      visible: false,\n      hasLeft: true,\n      hasRight: true,\n      top: 0,\n      left: 0,\n      index: 0,\n      swiperOption: {\n        slidesPerView: 'auto',\n        initialSlide: 0,\n        effect: 'slide',\n        spaceBetween: 1,\n        preventClicks: false,\n        freeMode: true,\n        mousewheel: {\n          sensitivity: 1.5\n        }\n      }\n    };\n  },\n  watch: {\n    $route: function $route(to) {\n      // 对路由变化作出响应...\n      var histories = this.histories;\n      var flag = histories.find(function (item) {\n        return item.path === to.path;\n      });\n\n      if (flag) {\n        return;\n      }\n\n      var ele = {};\n      ele.stageId = to.name;\n      ele.path = to.path;\n      ele.routePath = to.matched[to.matched.length - 1].path;\n      this.histories = [ele].concat(_toConsumableArray(histories));\n    },\n    logined: function logined(val) {\n      if (val) {\n        return;\n      }\n\n      this.closeAll();\n    },\n    visible: function visible(value) {\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu);\n      } else {\n        document.body.removeEventListener('click', this.closeMenu);\n      }\n    },\n    // 舞台改变时触发\n    stageList: function stageList() {\n      this.init();\n    },\n    histories: function histories(arr) {\n      if (arr.length < 2) {\n        this.eventBus.$emit('noReuse');\n      } else {\n        this.eventBus.$emit('hasReuse');\n      }\n    }\n  },\n  inject: ['eventBus'],\n  created: function created() {\n    var _this = this;\n\n    // 关闭窗口时执行\n    window.onbeforeunload = function () {\n      // 缓存历史记录\n      window.localStorage.setItem('history', JSON.stringify(_this.histories));\n    };\n  },\n  computed: _objectSpread({\n    logined: function logined() {\n      return this.$store.state.logined;\n    },\n    defaultRoute: function defaultRoute() {\n      return this.$store.state.defaultRoute;\n    }\n  }, mapGetters(['getStageByRoute', 'getStageByName', 'stageList'])),\n  mounted: function mounted() {\n    var _this2 = this;\n\n    this.init();\n    this.eventBus.$on('clearTap', function () {\n      _this2.histories = [];\n    });\n  },\n  methods: {\n    init: function init() {\n      var _this3 = this;\n\n      var histories = []; // 获取当前的历史记录, 可能从本地存储, 可能直接获取当前的\n\n      var localHistory;\n\n      if (this.histories.length > 0) {\n        localHistory = _toConsumableArray(this.histories);\n      } else {\n        localHistory = window.localStorage.getItem('history') || '[]';\n        localHistory = JSON.parse(localHistory);\n      }\n\n      localHistory.forEach(function (item) {\n        var findResult;\n\n        if (item.name) {\n          findResult = _this3.getStageByName(item.name);\n        } else {\n          findResult = _this3.getStageByRoute(item.routePath);\n        }\n\n        if (!findResult) {\n          return;\n        }\n\n        histories.push(_objectSpread({}, item, {\n          stageId: findResult.name\n        }));\n        _this3.histories = histories;\n      });\n    },\n    filterIcon: function filterIcon(icon) {\n      if (!icon) {\n        return false;\n      }\n\n      return icon.indexOf('/') !== -1;\n    },\n    closeAll: function closeAll() {\n      this.histories = [];\n      this.$router.push(this.defaultRoute);\n    },\n    closeOthers: function closeOthers() {\n      this.$router.push(this.histories[this.index].path);\n      this.histories = [];\n    },\n    closeLeft: function closeLeft() {\n      this.histories.splice(0, this.index);\n    },\n    closeRight: function closeRight() {\n      this.histories.splice(this.index + 1, this.histories.length - this.index - 1);\n    },\n    onTags: function onTags(index, event) {\n      this.closeMenu();\n      var menuMinWidth = 126;\n      var offsetLeft = this.$el.getBoundingClientRect().left;\n      var offsetWidth = this.$el.offsetWidth;\n      var maxLeft = offsetWidth - menuMinWidth;\n      var left = event.clientX - offsetLeft + 15;\n\n      if (left > maxLeft) {\n        this.left = maxLeft;\n      } else {\n        this.left = left;\n      }\n\n      if (index === 0) {\n        this.hasLeft = false;\n      }\n\n      if (index + 1 === this.histories.length) {\n        this.hasRight = false;\n      }\n\n      this.top = 18;\n      this.index = index;\n      this.visible = true;\n    },\n    closeMenu: function closeMenu() {\n      this.visible = false;\n      this.hasLeft = true;\n      this.hasRight = true;\n    },\n    close: function close(index) {\n      // 检测是否是当前页, 如果是当前页则自动切换路由\n      if (this.$route.path === this.histories[index].path) {\n        if (index > 0) {\n          this.$router.push(this.histories[index - 1].path);\n        } else if (this.histories.length > 1) {\n          this.$router.push(this.histories[1].path);\n        } else {\n          this.$router.push(this.defaultRoute);\n        }\n      } // 删除该历史记录\n\n\n      this.histories.splice(index, 1);\n      this.histories = _toConsumableArray(this.histories);\n    }\n  }\n};",null]}