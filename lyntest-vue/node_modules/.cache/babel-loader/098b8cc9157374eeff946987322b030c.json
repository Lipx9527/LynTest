{"remainingRequest":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/thread-loader/dist/cjs.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/component/statistical/function/function-statistical.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/src/component/statistical/function/function-statistical.vue","mtime":1606834545503},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/Users/lyn/Desktop/mmdz_ceshi/lyntest-vue/node_modules/@babel/runtime/regenerator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Manager from '@/model/statistical/manager';\nimport Function from '@/model/statistical/function';\nexport default {\n  data: function data() {\n    return {\n      date: '',\n      search: {\n        start_date: '',\n        end_date: '',\n        statistic_type: 1,\n        product_code: ''\n      },\n      radio_list: [{\n        label: '产品线',\n        value: 1\n      }, {\n        label: '测试',\n        value: 2\n      }, {\n        label: '开发',\n        value: 3\n      }],\n      pro_is_show: false,\n      product_list: [],\n      histogramData: {},\n      devEfficiencyData: {\n        columns: [],\n        rows: []\n      },\n      chartSettings: {},\n      chartExtend: {\n        // 柱子宽度\n        series: {\n          type: 'bar',\n          barWidth: 20,\n          label: {\n            position: 'top'\n          }\n        },\n        // x轴字体斜显示\n        xAxis: {\n          axisLabel: {\n            interval: 0,\n            formatter: function formatter(value) {\n              return value.split('').join('\\n');\n            }\n          }\n        }\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.functionStatistic(1);\n    this.getProductLineList();\n  },\n  methods: {\n    getProductLineList: function () {\n      var _getProductLineList = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Manager.getProductList();\n\n              case 2:\n                this.product_list = _context.sent;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getProductLineList() {\n        return _getProductLineList.apply(this, arguments);\n      }\n\n      return getProductLineList;\n    }(),\n    chooseDate: function () {\n      var _chooseDate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(date) {\n        var _date;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (date === null) {\n                  this.search.start_date = '';\n                  this.search.end_date = '';\n                } else {\n                  _date = _slicedToArray(date, 2);\n                  this.search.start_date = _date[0];\n                  this.search.end_date = _date[1];\n                }\n\n                this.functionStatistic();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function chooseDate(_x) {\n        return _chooseDate.apply(this, arguments);\n      }\n\n      return chooseDate;\n    }(),\n    functionStatistic: function () {\n      var _functionStatistic = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Function.statistic(this.search);\n\n              case 2:\n                res = _context3.sent;\n\n                if (res.success) {\n                  this.histogramData.rows = res.result;\n                }\n\n                this.pro_is_show = this.search.statistic_type === 3;\n\n                if (this.search.statistic_type === 1) {\n                  this.histogramData.columns = ['name', 'daily_function_count', 'project_function_count', 'daily_demand_count', 'project_demand_count'];\n                  this.chartSettings = {\n                    labelMap: {\n                      name: '产品线',\n                      daily_function_count: '日常功能点',\n                      project_function_count: '项目功能点',\n                      daily_demand_count: '日常需求数',\n                      project_demand_count: '项目需求数',\n                      demand: '需求数'\n                    },\n                    stack: {\n                      name: ['daily_function_count', 'project_function_count'],\n                      demand: ['daily_demand_count', 'project_demand_count']\n                    },\n                    axisSite: {\n                      right: ['daily_demand_count', 'project_demand_count']\n                    }\n                  };\n                } else if (this.search.statistic_type === 2) {\n                  this.histogramData.columns = ['name', 'count'];\n                  this.chartSettings = {\n                    labelMap: {\n                      name: '姓名',\n                      count: '功能点'\n                    }\n                  };\n                } else if (this.search.statistic_type === 3) {\n                  this.histogramData.columns = ['name', 'count', 'per_mille'];\n                  this.chartSettings = {\n                    axisSite: {\n                      right: ['per_mille']\n                    },\n                    labelMap: {\n                      name: '产品线',\n                      count: '功能点',\n                      per_mille: '千功能点bug率'\n                    }\n                  };\n                }\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function functionStatistic() {\n        return _functionStatistic.apply(this, arguments);\n      }\n\n      return functionStatistic;\n    }()\n  }\n};",null]}